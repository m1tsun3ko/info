



    <!--21/06/2025 14:15:32-->


<!DOCTYPE html>
<html lang="en">

<head prefix="og: http://ogp.me/ns#">
    <link rel="preconnect" href="https://storage.ko-fi.com">
    <link rel="dns-prefetch" href="https://storage.ko-fi.com">
    <link rel="preconnect" href="https://www.paypal.com" crossorigin>
    <link rel="dns-prefetch" href="https://www.paypal.com">
    <link rel="preconnect" href="https://www.paypalobjects.com" crossorigin>
    <link rel="dns-prefetch" href="https://www.paypalobjects.com">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=DM+Sans:wght@400;600;700;800&display=swap" rel="stylesheet">
    
    <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@400;600;700;800&display=swap" rel="stylesheet">
        <link rel="stylesheet" href="https://storage.ko-fi.com/cdn/fontawesome/subset-6.6/v10/css/all.min.css?v=2" crossorigin="anonymous">
    
    <link rel="stylesheet" href="/Content/css.css?v=780tv" />

        <meta name="viewport" content="width=device-width, initial-scale=1.0,viewport-fit=cover">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@kofi_button">
    <meta property="twitter:image:height" content="600" />
    <meta property="twitter:image:width" content="1200" />
    <meta property="og:site_name" content="Ko-fi">
    <meta property="og:locale" content="en_US">
    <meta property="og:image:height" content="628" />
    <meta property="og:image:width" content="1200" />
    <meta name="keywords" content="ko-fi, tip jar, buy me a coffee, kofi, coffee, donate, donations, illustrator, creator, artists, shop, membership">
    <meta name="twitter:title" content="Support Mitsu ❤️" />
    <meta name="twitter:description" content="Support Mitsu On Ko-fi." />
    <meta name="twitter:image" content="https://storage.ko-fi.com/cdn/generated/zfskfgqnf/2025-03-28_rest-aecfc6b9b60f297aa6e2e43cd46d5d47-198g5j5y.jpg" />
    <meta name="twitter:image:alt" content="Support Mitsu On Ko-fi." />

    <meta name="description" content="Support Mitsu On Ko-fi.">
    <title>Support Mitsu ❤️</title>
    <meta property="og:title" content="Support Mitsu ❤️" />
    <meta property="og:description" content="Support Mitsu On Ko-fi." />

    <meta property="og:type" content="website" />
    <meta property="og:url" content="https://ko-fi.com/m1tsun3ko/?hidefeed=true&amp;widget=true&amp;embed=true&amp;preview=true" />
    <meta property="og:image" content="https://storage.ko-fi.com/cdn/generated/zfskfgqnf/2025-03-28_rest-aecfc6b9b60f297aa6e2e43cd46d5d47-198g5j5y.jpg" />
    <meta property="og:image:alt" content="Support Mitsu On Ko-fi." />
    <meta property="fb:app_id" content="1445590775686116" />
    <meta name="X-Recruiting" content="We need devlopers! Help us shape the creator economy... https://more.ko-fi.com/careers">
    

<!-- Google Tag Manager -->
    <script>
        var isLoggedIn = 'no';
        var distinctId = '';
        dataLayer = [];
    </script>
    <script>
        dataLayer.push({
            'isLoggedIn': isLoggedIn,
            'distinctId': distinctId
        });
    </script>
    <script>
        (function (w, d, s, l, i) {
            w[l] = w[l] || []; w[l].push({
                'gtm.start':
                    new Date().getTime(), event: 'gtm.js'
            }); var f = d.getElementsByTagName(s)[0],
                j = d.createElement(s), dl = l != 'dataLayer' ? '&l=' + l : ''; j.async = true; j.src =
                    'https://www.googletagmanager.com/gtm.js?id=' + i + dl; f.parentNode.insertBefore(j, f);
        })(window, document, 'script', 'dataLayer', 'GTM-TDF6KQX');</script>
    <!-- End Google Tag Manager -->





    

    

    <meta name="msapplication-TileImage" content="/ms-icon-144x144.png">
    <meta name="theme-color" content="#ffffff">
    <meta name="msapplication-TileImage" content="/mstile-144x144.png">
    <meta name="theme-color" content="#ffffff">
    <meta name="p:domain_verify" content="380e2a01c51f5c04d6631fba27cc9375" />
    <meta name="msapplication-TileColor" content="#1AC0FF">
    <meta name="theme-color" content="#ffffff">
    

        <link rel="canonical" href="https://ko-fi.com/m1tsun3ko">
        
<script type="application/ld+json">
    {
    "@context": "http://schema.org/",
    "@type": "Organization",
    "name": "Ko-fi",
    "alternatename":"Kofi",
    "description": "Ko-fi lets creators get donations and sales from fans of their content for the price of a coffee. Join over 700,000 creators with a free Ko-fi Page",
    "url": "https://ko-fi.com",
    "logo": "https://storage.ko-fi.com/cdn/fullLogoKofi.png",
    "sameAs": [
    "https://www.twitter.com/kofi_button",
    "https://www.instagram.com/kofi_button"
    ],
     "foundingDate": "2012",
     "founders": [{
     "@type": "Person",
     "name": "Nigel Pickles"
       }]
    }
</script>



        <link rel="preload" href="/Scripts/sections/profile.js?v=342mo" as="script" />
            <link rel="preload" href="https://storage.ko-fi.com/cdn/useruploads/cbe8fea0-651d-4294-843c-f6325a8c79cc_.jpg" as="image">
            <link href="/Content/profileV2.css?v=780tv" rel="stylesheet" />
            <link rel="preload" href="//storage.ko-fi.com/cdn/scripts/vue.2.6.11.min.js" as="script">
            <link rel="preload" href="//storage.ko-fi.com/cdn/scripts/lodash.4.17.15.min.js" as="script">
    <link href="/lib/lite-youtube-embed-master/lite-yt-embed.css?v=780tv" rel="stylesheet" />
    
    


    <style>
        .grecaptcha-badge {
            display:none;
            visibility: hidden;
        }
    </style>
    <script src="https://www.google.com/recaptcha/api.js?render=6LeIm9UUAAAAAI9HoqMbV3xi0okAxcoNNumTv6QU" async defer></script>





<script type="text/javascript">var appInsights=window.appInsights||function(config){function t(config){i[config]=function(){var t=arguments;i.queue.push(function(){i[config].apply(i,t)})}}var i={config:config},u=document,e=window,o="script",s="AuthenticatedUserContext",h="start",c="stop",l="Track",a=l+"Event",v=l+"Page",r,f;setTimeout(function(){var t=u.createElement(o);t.src=config.url||"https://js.monitor.azure.com/scripts/a/ai.0.js";u.getElementsByTagName(o)[0].parentNode.appendChild(t)});try{i.cookie=u.cookie}catch(y){}for(i.queue=[],r=["Event","Exception","Metric","PageView","Trace","Dependency"];r.length;)t("track"+r.pop());return t("set"+s),t("clear"+s),t(h+a),t(c+a),t(h+v),t(c+v),t("flush"),config.disableExceptionTracking||(r="onerror",t("_"+r),f=e[r],e[r]=function(config,t,u,e,o){var s=f&&f(config,t,u,e,o);return s!==!0&&i["_"+r](config,t,u,e,o),s}),i}({instrumentationKey:"efbb8cb4-8fdb-4dcb-8b6e-0ca1fc6c9b01",sdkExtension:"a"});window.appInsights=appInsights;appInsights.queue&&appInsights.queue.length===0&&appInsights.trackPageView();</script></head>
<body class="mainBody">
    <!-- GTM -->
<noscript>
    <iframe src="https://www.googletagmanager.com/ns.html?id=GTM-TDF6KQX"
            height="0" width="0" style="display:none;visibility:hidden"></iframe>
</noscript>
<!-- End of GTM-->




<div id="mySidenav" class="sidenav">
    <a href="javascript:void(0)" class="closebtn" onclick="closeNav()">&times;</a>


<div class="kfds-srf-sidebar">

    

    <a href="/" rel='tooltip' title="Your Ko-fi dashboard" class="kfds-btn-sidemenu n">
        <i class="far fa-fw fa-home"></i><span class='kfds-lyt-pdg-start-end-medium'>Home</span>
    </a>

    <a href="/manage/mypage" rel='tooltip' title="Your public-facing Ko-fi page" class="kfds-btn-sidemenu">
        <img class="sidemenu-avatar" style="margin: -2px;">
        <span class="kfds-lyt-pdg-start-end-medium">Your Page</span>
    </a>

        <a href="/feed?src=sidemenu" rel='tooltip' title="Updates from the creators you follow" class="kfds-btn-sidemenu people-you-follow active">
            <i class="far fa-fw fa-newspaper"></i>
            <span class="kfds-lyt-pdg-start-end-medium">Feed</span>
            <div class="newsfeed-unread-dot">
                &nbsp;
            </div>
        </a>

    <a href="/settings?src=sidemenu" rel='tooltip' title="General settings for your page and payments" class="kfds-btn-sidemenu ">
        <i class="far fa-fw fa-cog"></i><span class="kfds-lyt-pdg-start-end-medium">Settings</span>
    </a>

    <hr class="kfds-mrgn-top-btm-8" />

    <div class="kfds-font-size-12 kfds-font-clr-dark-op-6 kfds-font-bold kfds-btm-mrgn-8 kfds-left-mrgn-8" style=" min-width: 248px;">My support</div>

    <a href="/manage/supportreceived?src=sidemenu" rel='tooltip' title="See all payments to and from you" class="kfds-btn-sidemenu ">
        <i class="far fa-fw fa-tasks"></i><span class="kfds-lyt-pdg-start-end-medium">Payments & Orders</span>
        <div class="transactions-unread-dot">
            &nbsp;
        </div>
    </a>


        <a href="/my-supporters" rel='tooltip' title="View and search your supporters" class="kfds-btn-sidemenu ">
            <i class="far fa-users-crown"></i><span class="kfds-lyt-pdg-start-end-medium">My Supporters</span>
        </a>

        <hr class="kfds-mrgn-top-btm-8" />
        <div class="kfds-font-size-12 kfds-font-clr-dark-op-6 kfds-font-bold kfds-btm-mrgn-8 kfds-left-mrgn-8" style=" min-width: 248px;">More ways to earn</div>
        <a href="/memberships/settings?src=sidemenu" rel='tooltip' title="Set up your membership tiers and see your members" class="kfds-btn-sidemenu ">
            <i class="far fa-fw fa-gem"></i><span class="kfds-lyt-pdg-start-end-medium">Memberships</span>
        </a>
        <a aria-label="Shop Settings" href="/shop/settings?src=sidemenu&productType=0" rel='tooltip' title="Set up your shop items and see shop sales" class="kfds-btn-sidemenu ">
            <i class="far fa-fw fa-store"></i><span class="kfds-lyt-pdg-start-end-medium">Shop</span>
        </a>
        <a aria-label="Commissions Settings" href="/shop/settings?src=sidemenu&productType=1" rel='tooltip' title="Set up your commissions listings and see requests" class="kfds-btn-sidemenu ">
            <i class="far fa-fw fa-handshake"></i><span class="kfds-lyt-pdg-start-end-medium">Commissions</span>
        </a>
        <a href="/manage/widgets?src=sidemenu" rel='tooltip' title="Plugins, widgets, integrations and tools to help you earn more" class="hidden-xs kfds-btn-sidemenu ">
            <i class="far fa-fw fa-code"></i><span class="kfds-lyt-pdg-start-end-medium">Buttons & Widgets</span>
        </a>

    <a href="/Discord/Settings" rel='tooltip' title="Connect to Discord to offer or claim roles and thank-yous!" class="kfds-btn-sidemenu " style=" fill: #323842 !important;">
        <i class="fab fa-discord fa-fw"></i>
        <span class="kfds-lyt-pdg-start-end-medium">Discord</span>
    </a>

        <a href="/streamalerts/settings?src=sidemenu" rel='tooltip' title="Stream Alerts, chatbots, overlays and other fun things for streamers" class="hidden-xs kfds-btn-sidemenu " style=" fill: #323842 !important;">
            <i class="far fa-message-heart fa-fw"></i>
            <span class="kfds-lyt-pdg-start-end-medium">Stream Alerts</span>
        </a>
        <a class="kfds-btn-sidemenu " href="/promote"><i class="far fa-fw fa-bullhorn"></i><span class="kfds-lyt-pdg-start-end-medium">Promote your page</span></a>

    <button class="kfds-btn-sidemenu" data-toggle="collapse" data-target="#chooseType0595533030a3420589efa99bf1ee44dc">
        <i class="far fa-fw fa-ellipsis-h"></i><span class="kfds-lyt-pdg-start-end-medium">More</span>
    </button>

    <div id="chooseType0595533030a3420589efa99bf1ee44dc" style="" class="collapse">
        <a href="/account/" rel='tooltip' title="Email, password, notfications, safety, subscriptions and more" class="kfds-btn-sidemenu ">
            <i class="far fa-fw fa-user-cog"></i><span class="kfds-lyt-pdg-start-end-medium">Account &amp; Billing</span>
        </a>

            <a href="/streamalerts/settings?src=sidemenu" rel='tooltip' title="Stream Alerts, chatbots, overlays and other fun things for streamers" class="hidden-sm hidden-md hidden-lg kfds-btn-sidemenu " style=" fill: #323842 !important;">
                <i class="far fa-message-heart fa-fw"></i>
                <span class="kfds-lyt-pdg-start-end-medium">Stream Alerts</span>
            </a>
            <a href="/manage/webhooks?src=sidemenu" rel='tooltip' title="Tools for developers to integrate with Ko-fi" class="kfds-btn-sidemenu ">
                <i class="far fa-fw fa-puzzle-piece"></i><span class="kfds-lyt-pdg-start-end-medium">API</span>
            </a>

            <a rel="noreferrer" target="_blank" href="https://help.ko-fi.com/hc/en-us" class="hidden-xs kfds-btn-sidemenu">
                <i class="far fa-life-ring fa-fw"></i>
                <span class="kfds-lyt-pdg-start-end-medium">Help</span>
            </a>
        <form action="/Account/LogOff" id="logoutForm" method="post"><input name="__RequestVerificationToken" type="hidden" value="Phjzh59iH5uWy_XuJ-uYAp0fGsV5tyMe9r5OITVBNrCovFNgqg2YcdJ0yns5O_3jMm0_7upSbiH1dRgf6KNzTmfQdFEvodxkAJyTHukeEPk1" />            <a class="kfds-btn-sidemenu" href="javascript:document.getElementById('logoutForm').submit()">
                <i class="far fa-sign-out-alt fa-fw"></i><span class="kfds-lyt-pdg-start-end-medium">Log Out</span>
            </a>
</form>
    </div>

    <hr class="kfds-mrgn-top-btm-8">

            <a href="#" class="kfds-btn-icon-normal kfds-btm-mrgn-16 kfds-btn-tertiary-light kfds-srf-rounded js-trigger-sidemenu-bottom-button" style="min-width: 248px;">
                <span class="kfds-lyt-pdg-start-end-medium">Upgrade</span>
            </a>

    <div class="theme-switch-wrapper">
        <label class="theme-switch" for="darkThemeToggle">
            <input type="checkbox" id="darkThemeToggle" class="dark-theme-icon darkThemeToggle"  />
        </label>
    </div>
</div>
</div>
    <div>
        <div id="body-content" class="body-content" style="margin: auto;">
            <img style="display:none;" nopin="nopin" class="css-rotate loading-spinner-center" alt="Loading" aria-label="Loading indicator" src="https://storage.ko-fi.com/cdn/loading.svg">
            <div onclick="closeNav();">
                


<script type="text/javascript">
    var switchTo5x = true;
</script>
<link href="/Content/profileV2.css?v=780tv" rel="stylesheet" />
<style>
    body {
        padding-top: 0;
        overflow-x: hidden;
        background-color: #f7f7f778; /*transparency to blend with site content*/
    }

    .navbar {
        display: none !important;
    }

    .footer-mini {
        display: none;
    }

    #creatorMenuButton {
        display: none;
    }

    .kfds-c-srf-rightsidebar-flex {
        display: none;
    }

    .supporter-terms {
        display: none;
    }

    .empty-state-follow-button {
        display: none;
    }

    .kfds-c-srf-primary-col-pdg {
        padding: 0 !important;
    }
</style>
    <style>
        .feed-panel {
            display: none;
        }
    </style>
    <style>
        .kfds-c-profile-tab-box:hover {
            color: #fcbf47 !important;
            background-color: #ffffff;
            border-bottom: 3px #fcbf47 solid !important;
        }
    .kfds-c-profile-tab-box:focus {
        color: #fcbf47 !important;
        background-color: #ffffff;
        border-bottom: 3px solid #fcbf47 !important;
    }
            .custom-plus-minus-btn {
                 color:#fcbf47!important;
                 border: 2px #fcbf47 solid !important;
            }
            .custom-plus-minus-btn:hover {
                 color:#fff !important;
                 border: 2px #fcbf47 solid !important;
                 background-color: #fcbf47 !important;
            }

            .custom-color-text {
                 color:#fcbf47!important;
            }

    .custom-color-border-theme {
        border-color: #fcbf47 !important;
    }

    .custom-color-solid-bg {
        background-color: #fcbf47 !important;
        background: #fcbf47 !important;
    }
        [data-theme="dark"] .custom-color-solid-bg {
            background-color: #fcbf47 !important;
            border-color: #fcbf47 !important;
            box-shadow: 5px 5px 12px #5772847d, 5px 5px 16px #070e1599, -5px -5px 12px #5772844a;
        }

    .custom-color-secondary-bg {
        background-color: #fcbf4729 !important;
        background: #fcbf4729 !important;
        color: #fcbf47 !important;
        border: 1px solid #fcbf4714 !important;
    }

      .btn-cta-2{
             border-color: #fcbf47 !important;
             color:#fcbf47 !important;
            }

            .btn-cta-2:hover {
    border-color: #fcbf47 !important;
    color: #fff !important;
    background: #fcbf47 !important;
}
    .custom-color-bg {
        background-color: #fcbf47aa !important;
        color: white !important;
    }

    .custom-color-border {
        border: 1px solid #fcbf47 !important;
    }

    .payment-option-selected {
        border: 2px solid #fcbf47 !important;
    }

    .badge-creator {
        background-color: #fcbf47 !important;
    }

    .tab label:hover {
        color: #fcbf47 !important;
    }
    [type=radio]:checked ~ label {
        border-bottom: 3px solid #fcbf47 !important;
        color: #fcbf47 !important;
    }
    .btn-buycoffee, .btn-support {
        border: 1px solid #fcbf47 !important;
        background-color: #fcbf47 !important;
    }
    a:hover {
        color: #fcbf47 !important;
    }
    .small-blue-button:hover {
        border-color: #fcbf47 !important;
    }
    .feeditem-profile-img-owner {
        border: 2px solid #fcbf47 !important;
    }
    .btn-control-panel-white:hover {
        color: white !important;
    }
    a.btn.btn-primary :hover {
        color: #fff !important;
    }
            .caption-pdg > a  {
                color: #fcbf47 !important;
            }

            #show-more-content-link {
                color: #fcbf47 !important;
                background-color: #fcbf4729 !important;
                background: linear-gradient(145deg, #fcbf4729, #fcbf4729), linear-gradient(145deg,#ffffffb5,#ffffff) !important;
            }

            .handle-header {
                background-color: #fcbf47 90 !important;
                text-shadow: 0px 1px 1px #fcbf47 !important;
            }

            .kfds-c-amount-selector:hover {
                background-color: #fcbf4729;
                color: #fcbf47;
                border: 2px solid #fcbf4714;
            }
    .kfds-pill-selector-ghost-dark.payment-selected {
        background-color: #fcbf4729 !important;
        color: #fcbf47 !important;
        
    }
    </style>


    <div id="tab-menu-container" class="hidden"></div>

<div class="kfds-lyt-row-f-start">
        <div class="row primary-page-pdg fit-container">

            <div id="tab1-content" style=";" class="kfds-c-lyt-profile-row-to-col main-content">
                <!-- Left Column -->
                <div id="second-col-v2" style=" " class="sidebar kfds-c-srf-rightsidebar-flex">
                    <div class="sidebar__inner">
                        <div class="kfds-c-srf-sticky-contentwrapper">
                            <div class="kfds-c-invisible-div kfds-c-show-mobileonly"></div>
                                <div class="pn-flex simple-panel text-center mb">


<div class="p-16 pn-flex text-center profile-page-tile">
    <div class="kfds-lyt-width-100">
                    <div class="pull-right">
                <button type="button" onclick="$('#shareGoalModal').modal();" class="kfds-btn-tertiary-light-s"><i class="far fa-share"></i></button>
            </div>
        <div class="kfds-btm-mrgn-24">
                <div class="text-left kfds-font-bold kfds-font-size-16">for my digital art tablet</div>
        </div>
        <div class="progress" style="">
            <div class="progress-bar" role="progressbar" aria-valuenow="0"
                 aria-valuemin="0" aria-valuemax="100" style="padding-top: 9px; width: 0%">
            </div>
        </div>
        <div class="text-left kfds-btm-mrgn-8">
                <span class="kfds-font-bold">1% </span><span class="goal-label">of $300 goal</span>
        </div>

            <div class="kfds-btm-mrgn-16 kfds-lyt-col-center hidden-lg hidden-md hidden-sm">
                <div class="kfds-lyt-width-100 kfds-lyt-between">
                    <button type="submit" class="hidden-experiment kfds-font-size-16 kfds-btn-primary kfds-font-bold kfds-srf-rounded kfds-lyt-width-100 kfds-srf-height-s custom-color-solid-bg" onclick="openDonationModal()">
                        <span id="">Donate</span>
                    </button>
                </div>
                <div class="kfds-lyt-width-100 kfds-lyt-between hidden">
                </div>
            </div>

    </div>
    <div class="row">
        <div class="col-xs-12 hint text-center hidden">
            <button onclick="openDonationModal()" class="btn btn-primary btn-support custom-color-bg mt mb btn-full-width">Support</button>
        </div>
    </div>
</div>
                                </div>
                            <div class="kfds-c-srf-personal-info-panel kfds-btm-mrgn-24 hidden">
                                <div class="col-xs-12 blockquote-box-mrgn">
                                    <!-- left donation cta -->
                                        <div class="kfds-btm-mrgn-16 kfds-lyt-between">
                                            <span class="kfds-font-bold kfds-font-size-paragraph">About</span>
                                            <div>
                                                    <div class="">
                                                    </div>
                                            </div>
                                        </div>

                                        <div class="kfds-btm-mrgn-8 kfds-c-show-more-wrapper">
                                            <input type="checkbox" id="expanded-page" class="hidden-safari">
                                            <p class="kfds-c-para-control line-breaks break-long-words">&#128155;&#129505; you can support me here &#129505;&#128155;</p>
                                            <label for="expanded-page" role="button" class="cursor-pointer custom-color-text kfds-text-is-link-dark">Show More</label>
                                        </div>
                                    <div class="kfds-c-show-mobileonly kfds-top-mrgn-16 hidden">
                                        <div class=" kfds-lyt-between hidden">
                                            <button type="submit" class=" kfds-btn-primary kfds-font-bold kfds-srf-rounded kfds-lyt-width-47 kfds-srf-height-s custom-color-solid-bg " onclick="$('#paymentModal').modal();">
                                                <img src="https://storage.ko-fi.com/cdn/cuplogo-sm.png" height="16" class="kfds-right-mrgn-8">
                                                <span id="">One-time</span>
                                            </button>
                                            <button class=" kfds-btn-primary-light kfds-font-bold kfds-srf-rounded kfds-lyt-width-47 kfds-srf-height-s custom-color-secondary-bg" onclick="$('#buyCommissionModal').modal();">
                                                <span id="">Monthly</span>
                                            </button>
                                        </div>
                                    </div>

                                    <div class="">
                                        <!-- Tags -->
                                                <div class="tag-container kfds-top-mrgn-8">
                                                            <span class="label-tag">Animation</span>
                                                            <span class="label-tag">Blogging</span>
                                                            <span class="label-tag">Art</span>
                                                            <span class="label-tag">Community</span>
                                                </div>

                                    </div>
                                </div>
                            </div>
                            <div class="kfds-c-invisible-div hidden-xs"></div>
                        </div>
                    </div>
                </div>
                <!-- Right Column -->
                <div class="kfds-c-srf-primary-col-pdg kfds-c-srf-creator-content-wrapper" id="column-primary-v2">
                    <div class="row kfds-btm-mrgn-24">
                        <div id="payment-panel" class="simple-panel rounded-14">
                            <img nopin="nopin" class="css-rotate loading-spinner-center" src="https://storage.ko-fi.com/cdn/loading.svg">
                        </div>
                    </div>
                    <div id="middleColumn" class="">
                        
                        <div class="simple-panel feed-panel p-16 kfds-btm-mrgn-16 rounded-14">
                            <div class="kfds-lyt-row kfds-btm-mrgn-16">
                                    <span class="kfds-font-bold kfds-font-size-paragraph">Feed</span>
                            </div>
                            <div id="feedContainerDiv" class="row">
                                <div id="feedLoading" class="text-center">
                                    <img alt="loading" class="loading-spinner greyscale" src="/img/loading.svg" />
                                </div>
                                
                            </div>
                        </div>
                    </div> <!--end of middle-->

                </div>
            </div> <!--end of tab 1-->
        </div>
   
</div>

<div style="display:none">
    
<style>
    .make-cover-option {
        display: none;
    }
</style>

<div id="galleryItemViewSkeleton" class="">
    <div class="gallery-item-header modal-header-pdg">
        <div class="gallery-item-profile">
            <div class="gallery-item-thumb">
                <img src="https://storage.ko-fi.com/cdn/useruploads/79f2e274-d0c3-4864-b877-ba3955e6a7d8_bee75945-92ed-4995-9c76-d03be578ff54.png" class="gallery-profile-img">
            </div>
            <div>
                <a href="">  <name class="breakall kfds-font-clr-dark">Mitsu &nbsp;</name></a>
                <div class="feeditem-time kfds-lyt-row text-nowrap" style="padding: 4px 0;">
                    Loading...
                </div>
            </div>
        </div>
        <div class="pull-right"></div>
    </div>
    <div style="min-height:200px" class="gallery-item-main loading-bg item-current-bg">
        <img style="width:100%;" id="skeleton-preview" class="gallery-image center-block img-responsive gallery-img-width" />
    </div>
    <div class="galleryItem-footer">
        <div class="mt-xs gallery-modal-bottom-cta">
            <div class="dropdown pull-right">
                <i class="fas fa-ellipsis-h feed-dropdown-icon" type="button" data-toggle="dropdown"></i>
            </div>
            <div style="display: flex; align-items: center;">
                <div id="like-container-sk" style="">
                    <div class="like-box" onclick="">
                        <i class="far fa-heart icon-emptystate"></i>
                        <span style="display:none" id="like-count-sk" class="text-counter-right"></span>
                    </div>
                </div>
                <div>
                    <div class="like-box">
                        <i class="far fa-share"></i>
                    </div>
                </div>
                <button type="submit" class="btn tiny-support-button" onclick="$('#galleryItemView').modal('toggle'); checkoutApp.initializeDonationFlow();">
                    <img src="https://storage.ko-fi.com/cdn/logomarkLogo.png" class="buttoncup"> <span id="">Support</span>
                </button>
            </div>
        </div>
        <div class="mt-xs gallery-modal-bottom-cta">
            <div style="display: flex; align-items: center;">
                <div id="share-container"></div>
            </div>
        </div>
        <div class="row" style="margin-left:0px;margin-right:0px;">
            <div class="mtmb-xs modal-caption-pdg">

            </div>
        </div>
    </div>
</div>
</div>

<div class="modal inmodal" style="height: 100%" id="galleryItemView" tabindex="-1" role="dialog" aria-hidden="true" data-show="true">
    <div class="modal-dialog modal-lg centred-fixed-div">
        <div class="gallery-item-modal-container ">
            <button type="button" class="close close-modal-mrgn gallery-item-close" data-dismiss="modal">
                <span aria-hidden="true">×</span><span class="sr-only">Close</span>
            </button>
            <div id="galleryItemViewDiv">
                
            </div>
        </div>
    </div>
</div>

<span id="poweredby" class="text-center kfds-lyt-center powered-by">Powered by&nbsp;<a target="_blank" title="Donations by Ko-fi" href="https://ko-fi.com?ref=poweredby" class="kfds-font-clr-dark kfds-font-bold">Ko-fi</a></span>
<div style="">



<div class="modal inmodal fade in" style="height: 100%;" id="checkoutModal" tabindex="-1" role="dialog" data-keyboard="false" data-backdrop="static" aria-hidden="true" data-show="true">
    <div class="modal-dialog modal-lg centred-fixed-div">
        <div class="gallery-item-container-top hidden"></div>

        <div id="checkoutModalContent" class="ds-support-panel-modal">
            
        </div>
    </div>
</div>

<div style="display: none;">
    <div id="checkout-modal-skeleton">
        <div v-cloak style="display: flex; justify-content: center; flex-direction: column; margin: auto; margin-top: 0;" id="checkout-%UNIQUE_ID%">
            <!-- Cover -->
            <div id="widget-cover" style="position:relative; max-height: 150px">
                <button type="button" class="ds-c-close-modal-btn" data-dismiss="modal" style="top: 16px; right: 16px;" v-if="isModal">
                    <i aria-hidden="true" class="far fa-times" title="close"></i><span class="sr-only">Close</span>
                </button>

                <div v-if="renderPageBanner">
                    <img loading="lazy" class="kfds-lyt-width-100" v-bind:src="receiver.coverImageUrl" alt="Cover Image" onerror="this.onerror=null;this.src='https://storage.ko-fi.com/cdn/white_vue_defaultbg.png'" style="border-radius: 8px 8px 0 0; position: absolute; object-fit:cover; height: 88px; max-height: 100px;">
                </div>
                <!-- Avatar -->
                <div class="kfds-lyt-center kfds-btm-mrgn-8" style="margin-top: 20px;" v-if="renderPageBanner">
                    <img v-bind:src="receiver.profileImageUrl" alt="Profile picture" class="kfds-c-avatar-payment">
                </div>
            </div>
            <!-- important to use v-show instead of v-if to keep the elements in the DOM -->
            <div v-show="isLoading">
                <div class="row" style="margin-top: 25px;" v-bind:style="{ marginBottom: (isCompact ? '25' : '220') + 'px' }">
                    <div style="margin-top:64px;" class="col-xs-12 mt mb text-center">
                        <img height="64" src="/img/loading.svg" />
                    </div>
                </div>
            </div>
            <div v-show="!isLoading && render" class="ds-support-panel-wrapper" style=" box-shadow: none; border-radius: 14px;">
                <div v-show="transactionId == null">



<div class="kfds-lyt-width-100 kfds-lyt-pdg-all-medium kfds-lyt-column kfds-btm-mrgn-24" style="max-width: 540px; margin: 0 auto; ">
    <div class="kfds-lyt-between-top kfds-btm-mrgn-16" v-if="donationPanel.disableDonations && isTiersMode">
        <span class="kfds-font-bold kfds-font-size-16 text-limit-one-line">Choose a Membership Level</span>
    </div>
    <div v-else>
        <div class="kfds-lyt-between-top kfds-btm-mrgn-16" v-if="!isDonationMode">
            <span class="kfds-font-bold kfds-font-size-16 text-limit-one-line" v-if="intent == null" v-html="'Buy a ' + donationPanel.nounName + ' for ' + receiver.displayName"></span>
            <span class="kfds-font-bold kfds-font-size-16 text-limit-one-line" v-if="intent == 'direct_message_from_profile_page'" v-html="'Support ' + receiver.displayName + ' to start talking'"></span>
        </div>
        <div class="kfds-lyt-between-top kfds-btm-mrgn-16" v-if="isDonationMode">
            <span class="kfds-font-bold kfds-font-size-16 text-limit-one-line" v-html="'Support ' + receiver.displayName"></span>
        </div>
    </div>
    
    <div class="kfds-lyt-width-100">
        <!-- This is the legacy one. Can be removed in the future  -->
        
        <div class="payment-frequency-div" v-if="donationPanel.supportsRecurringDonations || isTiersMode()">
            <input type="checkbox" style="display:none;" value="recurring" id="makeRecurring" name="makeRecurring" aria-hidden="true">
            <div class="kfds-lyt-width-100 kfds-lyt-between kfds-btm-mrgn-16 pill-selector-wrapper kfds-srf-rounded p-4" v-if="!donationPanel.disableDonations">

                <!-- One-Time Payment Option -->
                <button id="p-o-onetime" v-on:click="setIsMembership(false)" v-bind:class="{'payment-selected': !donationPanel.isMembershipOrSubscription}"
                        class="kfds-font-bold kfds-srf-rounded kfds-lyt-width-100 kfds-pill-selector-ghost-dark text-center"
                        aria-pressed="false" aria-label="One time donation option">
                    <span>One time</span>
                </button>

                <!-- Recurring Payment Option -->
                <button id="p-o-recurring" v-on:click="setIsMembership(true)" v-bind:class="{'payment-selected': donationPanel.isMembershipOrSubscription}"
                        class="kfds-font-bold kfds-srf-rounded kfds-lyt-width-100 kfds-pill-selector-ghost-dark text-center"
                        style="position: relative;"
                        aria-pressed="true" aria-label="Monthly donation option">
                    <span style="white-space:nowrap" v-if="!isTiersMode()">Monthly</span>
                    <span style="white-space:nowrap" v-else>Membership</span>
                    <i class="far fa-info-circle kfds-left-mrgn-4" rel="tooltip" data-original-title="Support monthly to help Mitsu build a reliable source of income."></i>
                </button>

            </div>
        </div>
        <div class="" id="oneoff" v-show="shouldShowRegularDonationPanel()">
            <div class="suggest-amounts" v-if="!isWidget && donationPanel.suggestedAmounts != null && donationPanel.suggestedAmounts.length > 0 && isDonationMode">
                <div class="kfds-btm-mrgn-8">
                    <label class="kfds-font-bold kfds-font-clr-dark-op-8">Choose amount</label>
                </div>
                <div class="kfds-lyt-row kfds-btm-mrgn-16 gap-8" id="suggestedAmount">
                    <button type="button" id="suggestedAmount" class="kfds-c-amount-selector kfds-lyt-width-100" v-bind:class="{ 'amount-active': donationPanel.amount == amount }" v-for="amount in donationPanel.suggestedAmounts" v-on:click="donationPanel.amount = amount"><nobr>{{ currencySign }} {{ amount }}</nobr></button>
                </div>
            </div>
            <div v-show="!isDonationMode" class="form-group ds-c-coffee-cup-wrapper kfds-mrgn-top-btm-8">
                <div class="kfds-lyt-between kfds-lyt-width-100">
                    <div class="kfds-lyt-width-100 kfds-lyt-row kfds-btm-mrgn-16" style="width: auto; border-radius: 50px;">
                        <img src="https://storage.ko-fi.com/cdn/logomarkLogo.png" class="kfds-right-mrgn-8 ds-c-image-height-28-to-22" id="animatedcup-%UNIQUE_ID%" />
                        <div class="kfds-lyt-auto-to-100-width">
                            <div class="kfds-font-16-to-14 kfds-c-word-wrap" style="max-width: 80px;">{{ currencySign }}{{ donationPanel.unitAmount }} each</div>
                        </div>
                    </div>
                    <div class="qty-container qty mb-8" style="min-width: max-content; width: 176px;">
                        <span v-on:click="decreaseQuantity()" class="minus bg-dark custom-color-secondary-bg kfds-c-btn-primary-light" v-bind:class="{ 'kfds-c-btn-disable' : donationPanel.quantity <= 1 }" style="width: 46px; margin: 0;">-</span>
                        <input type="number" maxlength="5" min="1" max="99999" v-bind:class="{ 'kfds-c-btn-disable': donationPanel.amount % donationPanel.unitAmount != 0 }" onkeypress="return event.charCode >= 48 && event.charCode <= 57 && this.value.length<=5 ;" id="qty" inputmode="numeric" class="count kfds-srf-rounded kfds-c-form-border" name="qty" step="1" v-model="donationPanel.quantity" style="min-width: 70px; height: 48px;" v-on:keyup="handleQuantityChanged()">
                        <span v-on:click="increaseQuantity()" class="plus kfds-c-btn-primary-light custom-color-secondary-bg" style="width: 46px; margin: 0;" id="ds-plus-btn">+</span>
                    </div>
                </div>
            </div>
            <div class="kfds-lyt-column kfds-lyt-width-100 input-layout-compact-only">
                <div id="customAmountControl" class="price-input kfds-lyt-width-100">
                    <div class="form-group">
                        <div class="kfds-btm-mrgn-8" v-if="!isWidget && donationPanel.suggestedAmounts != null && donationPanel.suggestedAmounts.length > 0">
                            <label class="kfds-font-bold kfds-font-clr-dark-op-8">or enter an amount</label>
                        </div>
                        <div class="kfds-c-form-border kfds-lyt-row kfds-srf-border-8">
                            <span class="kfds-font-bold kfds-left-mrgn-16 kfds-font-size-16 kfds-font-clr-dark-op-8">{{ currencySign }}</span>
                            <input name="customAmountInput" onkeypress="return event.charCode >= 48 && event.charCode <= 57 && this.value.length<=7;" maxlength="7" min="1" max="999999" type="number" inputmode="numeric" v-bind:min="donationPanel.minimumAmount" autocomplete="customAmountInput" class="form-control kfds-no-input-border kfds-font-size-16 kfds-font-bold ds-c-placeholder p-8 " style="text-align: left;" v-model="donationPanel.amount" v-bind:placeholder="donationPanel.minimumAmount" v-on:keyup="handleManualAmountChanged()">
                        </div>
                        <div class="ds-text-danger kfds-top-mrgn-16 kfds-btm-mrgn-16" v-show="isDonationAmountInvalid()">Please enter at least {{ currencySign }}{{ donationPanel.minimumAmount }}</div>
                    </div>
                </div>
                    <div class="form-group kfds-lyt-width-100 compact-input-name">
                        <div>
                            <input data-lpignore="true" style="min-height: 50px" autocomplete="guest-n" type="text" name="guestn" class="form-control kfds-c-form-border" v-model="guestDetails.name" placeholder="Your name or nickname" aria-describedby="sizing-addon1">
                        </div>
                        <div id="customDonationNameInput" class="ds-text-danger kfds-top-mrgn-16" v-show="isGuestNameInvalid()">Maximum name length is 50 characters</div>
                    </div>
            </div>
            <div class="form-group" style="">
                <textarea data-lpignore="true" rows="2" class="form-control buy-message kfds-c-form-border" id="customDonationMessageInput" name="txtThanks" placeholder="Your message" maxlength="280" aria-describedby="sizing-addon1" v-model="donationPanel.message" v-on:focus="donationPanel.showIsPrivateMessage = true"></textarea>
            </div>
            <div v-show="donationPanel.showIsPrivateMessage" class="form-group">
                <div class="checkbox checkbox-success">
                    <input value="true" id="makePrivateMessage-%UNIQUE_ID%" name="makePrivateMessage-%UNIQUE_ID%" type="checkbox" v-model="donationPanel.isPrivateMessage">
                    <label class="kfds-font-bold" for="makePrivateMessage-%UNIQUE_ID%">
                        Private message
                    </label>
                    <i class="far fa-question-circle tip" rel="tooltip" title="Only the creator will see your message." id="blah"></i>
                </div>
            </div>
                <div v-show="!donationPanel.isMembershipOrSubscription && !donationPanel.disableOneTimeDonations && !isWidget && !isTiersMode() && donationPanel.upsellMonthly && donationPanel.monthlyBenefits != null && (!donationPanel.isMembership || donationPanel.upsellMonthlySelected)" class="form-group">
                    <div class="checkbox checkbox-success">
                        <input type="checkbox" v-on:change="toggleUpsellActive()" id="monthly-upsell-%UNIQUE_ID%" name="monthly-upsell-%UNIQUE_ID%">
                        <label class="fontweight-normal" for="monthly-upsell-%UNIQUE_ID%">
                            <strong>Make it monthly</strong>
                            <span v-if="isTiersMode()">and unlock member-only benefits</span>
                            <span v-if="!isTiersMode() && donationPanel.monthlyBenefits != null && (donationPanel.monthlyBenefits.UnlockableGalleryItems + donationPanel.monthlyBenefits.UnlockablePosts) > 0">and unlock {{ donationPanel.monthlyBenefits.UnlockableGalleryItems + donationPanel.monthlyBenefits.UnlockablePosts }} posts</span>
                        </label>
                    </div>
                </div>

            <div class="browser-autofill-honeypot-hidden" aria-hidden="true">
                <label for="username">Email</label>
                <input data-lpignore="true" type="text" id="username" name="username" autocomplete="username" tabindex="-1">
                <label for="password">Password</label>
                <input data-lpignore="true" type="text" id="password" name="password" autocomplete="password" tabindex="-1">
                <label for="your-name">Name</label>
                <input data-lpignore="true" type="text" placeholder="Name" id="your-name" name="your-name" autocomplete="name" tabindex="-1">
            </div>
            <button id="donateButton" class="kfds-c-btn-primary kfds-lyt-width-100 kfds-font-bold kfds-srf-rounded kfds-font-size-16 custom-color-solid-bg" v-bind:class="{ 'kfds-c-btn-disable' : !isSupportPanelInValidState() }" v-on:click="createDonation()" v-html="donationPanel.donateCta + (bindableDonationAmount() != null && bindableDonationAmount() > 0 ? ' ' + currencySign + bindableDonationAmount() : '') + (donationPanel.isMembershipOrSubscription ? ' / month' : '')">
                
            </button>
            <div class="kfds-lyt-center kfds-lyt-column">
                <span class="kfds-top-mrgn-8 kfds-font-clr-dark-op-8 nudge-text no-fee-nudge kfds-font-size-16" v-if="!donationPanel.discordRewardsAvailable && !donationPanel.supportsRecurringDonations">
                    <span v-html="'Payments go directly to ' + receiver.displayName"></span>
                </span>
                <div v-if="donationPanel.discordRewardsAvailable" class="kfds-top-mrgn-8 text-center">
                    <span class="kfds-top-mrgn-8 kfds-font-clr-dark-op-8 inline" v-if="donationPanel.discordRewardsSubscribersOnly"><i class="fab fa-discord kfds-right-mrgn-8"></i>Discord roles available to monthly supporters</span>
                    <span class="kfds-top-mrgn-8 kfds-font-clr-dark-op-8 inline" v-if="!donationPanel.discordRewardsSubscribersOnly"><i class="fab fa-discord kfds-right-mrgn-8"></i>Discord roles available</span>
                </div>
                
            </div>
        </div>

        <div role="tabpanel" class="tab-pane fade" v-bind:class="{ 'in active' : shouldShowTiersPreview() }" id="tier" v-if="shouldShowTiersPreview()">
            <div class="kfds-lyt-between">
                <span class="kfds-font-bold"></span>
                <div v-if=" donationPanel.membershipTiers.length > donationPanel.maxNumberOfTierPreview">
                    <a href="#" class="kfds-text-is-link-dark kfds-btm-mrgn-8" v-on:click="switchToTiersTab()" v-if="!isWidget">See all {{ donationPanel.membershipTiers.length }} tiers</a>
                    <a v-bind:href="'/' + receiver.pageId + '/tiers'" class="kfds-text-is-link-dark kfds-btm-mrgn-8" target="_blank" v-else>See all {{ donationPanel.membershipTiers.length }} tiers</a>
                </div>

            </div>

            <div class="kfds-lyt-column kfds-lyt-between-top no-padding kfds-btm-mrgn-16 kfds-lyt-width-100 tier-container"
                 v-for="(tier, index) in orderedAndFilteredTiers()">

                <div class="kfds-lyt-width-100 kfds-srf-rounded-8 tier-thumbnail-wrapper" style="border: none;" v-if="tier.PreviewImages != null && tier.PreviewImages.length > 0">
                    <img v-bind:src="'https://storage.ko-fi.com/cdn/useruploads/' + 'post/' + tier.PreviewImages[0].FileName" class="kfds-lyt-width-100 tier-thumbnail">
                </div>
                <div class="kfds-lyt-between-top kfds-lyt-width-100 p-16" style="border: none;">
                    <div class="kfds-lyt-width-100 kfds-lyt-column" style="border: none;">
                        <div class="kfds-lyt-between-algn-top kfds-lyt-column-start">
                            <div class="kfds-font-bold kfds-lyt-width-100 kfds-font-size-16 kfds-c-word-wrap text-center">{{ tier.Name }}</div>
                            <div class="kfds-lyt-row kfds-lyt-center kfds-lyt-width-100">
                                <div class="kfds-lyt-row kfds-lyt-center">
                                    <span class="kfds-font-size-16 kfds-font-bold">{{ currencySign }}</span><span class="kfds-font-size-20 kfds-font-bold">{{ parseFloat(tier.PricePerMonth).toFixed(2).replace(".00", "") }}</span>
                                    <span class="kfds-font-size-16 kfds-font-bold kfds-font-clr-dark-op-8 text-center"><nobr>&nbsp;per month</nobr></span>
                                </div>
                            </div>
                        </div>
                        <div class="kfds-btm-mrgn-16 kfds-top-mrgn-16" v-if="!tier.IsActiveMember">
                            <button class="kfds-c-btn-primary kfds-font-size-16 kfds-lyt-width-100 kfds-font-bold kfds-srf-rounded btn-centered-auto-width custom-color-solid-bg"
                                    v-bind:onclick="'createMembershipOrder(\'' + tier.Id + '\')'" v-if="tier.SpotsAvailable == null || tier.SpotsAvailable > 0">
                                Join
                            </button>
                            <button class="kfds-c-btn-disable kfds-lyt-width-100 kfds-font-bold kfds-srf-rounded btn-centered-auto-width custom-color-bg"
                                    v-else>
                                We're full!
                            </button>
                            <div class="kfds-font-size-14 kfds-font-clr-dark-op-6 kfds-top-mrgn-8 kfds-lyt-width-100 text-center" v-if="tier.SpotsAvailable != null && tier.SpotsAvailable > 0">{{ tier.SpotsAvailable }} places left</div>
                            <div class="kfds-font-size-14 kfds-font-clr-dark-op-6 kfds-top-mrgn-8 kfds-lyt-width-100 text-center" v-if="tier.SpotsAvailable != null && tier.SpotsAvailable == 0">No places left</div>
                        </div>
                        <div class="kfds-top-mrgn-16 kfds-lyt-width-100" v-else>
                            <button class="kfds-c-btn-disable kfds-font-size-20 kfds-lyt-width-100 kfds-font-bold kfds-srf-rounded btn-centered-auto-width custom-color-bg">Joined</button>
                            <div class="kfds-font-size-14 kfds-font-clr-dark-op-6 kfds-top-mrgn-8 kfds-lyt-width-100 text-center">Your current tier</div>
                        </div>
                        <div class="ds-benefit-wrapper">
                            <a class="btn kfds-lyt-center kfds-font-bold kfds-font-clr-primary ds-c-show-tier kfds-lyt-width-100 kfds-text-is-link-dark" v-bind:href="'#tier%UNIQUE_ID%' + index" v-bind:id="'tier%UNIQUE_ID%' + index">
                                Show more
                            </a>
                            <div class="kfds-btm-mrgn-16 ds-benefit" v-bind:id="'benefits%UNIQUE_ID%' + index">
                                <p class="break-long-words kfds-c-word-wrap line-breaks">{{ tier.Description }}</p>
                                <ul class="ds-c-perk-bullet kfds-lyt-width-100 kfds-top-mrgn-16 kfds-left-mrgn-16">
                                    <li class="tier-benefit" v-for="benefit in orderedTierBenefits(tier.Benefits)">
                                        <span class="kfds-font-clr-dark-op-6 break-long-words">{{ benefit.Description }}</span>
                                    </li>
                                </ul>
                            </div>
                            <div class="ds-fade"></div>
                        </div>

                    </div>
                </div>
            </div>
            <div class="kfds-lyt-between kfds-lyt-width-100 kfds-btm-mrgn-8 kfds-top-mrgn-16" v-if=" donationPanel.membershipTiers.length > donationPanel.maxNumberOfTierPreview">
                <div class="kfds-lyt-width-100 kfds-btn-tertiary-light kfds-srf-rounded kfds-font-bold" type="button" v-on:click="switchToTiersTab()" v-if="!isWidget">See All {{ donationPanel.membershipTiers.length }} Tiers</div>
                <a v-bind:href="'/' + receiver.pageId + '/tiers'" target="_blank" class="kfds-lyt-width-100 kfds-btn-tertiary-light kfds-srf-rounded kfds-font-bold" type="button" v-else>See All {{ donationPanel.membershipTiers.length }} Tiers</a>
            </div>
        </div>

    </div>
</div>
                </div>

                <div v-if="isAtCheckoutStep">
                    <div v-if="isGuestCheckout">
                        <div class="kfds-btm-mrgn-16 kfds-font-bold kfds-font-size-small">
                            Your email address
                        </div>

                        <div class="form-group kfds-btm-mrgn-16">
                            <input id="GuestEmail-%UNIQUE_ID%" name="GuestEmail" placeholder="Email" type="email" autocomplete="email" v-model="guestDetails.email" class="form-control kfds-c-form-border">
                            <span style="color: #ff5f5f" id="validation-guestemail"></span>
                        </div>
                        <span class="field-validation-error kfds-btm-mrgn-24" style="font-weight: var(--weight-m); display: block;" v-if="guestDetails.email != null && !guestEmailIsValid()">
                            Please provide a valid email address
                        </span>
                    </div>
                    <div>
                        <div class="kfds-btm-mrgn-16 kfds-font-bold kfds-font-size-small">
                            Pay with...
                        </div>

                        <div class="mtmb-md terms text-left">You're paying <span v-html="receiver.displayName"></span> directly</div>
                        <div v-show="shouldShowStripePaymentElement()">
                            <div id="stripe-payment-element" class="">
                            </div>
                            <button type="button" class="kfds-btn-primary kfds-font-bold kfds-lyt-width-100 kfds-btm-mrgn-16 custom-color-solid-bg" style="font-size: 18px; margin-top: 15px; height: 47px;" v-on:click="submitStripePaymentElement()">Pay now</button>
                        </div>
                        <div id="stripe-payment-form-wrapper-%UNIQUE_ID%" class="ds-c-stripe-wrapper expandable" v-show="shouldShowStripeCardElement()">
                            <div class="kfds-btm-mrgn-16">
                                <input id="cc-name-%UNIQUE_ID%" placeholder="Name on card" type="text" class="form-control kfds-c-form-border" v-model="paymentMethodsContext.stripeCheckout.elements.nameOnCard" autocomplete="cc-name">
                            </div>
                            <form id="stripe-payment-form">
                                <div id="stripe-cardpayment" class="ds-stripe-payment-form-wrapper kfds-c-form-border"></div>

                                <div class="error" role="alert" v-for="error in paymentMethodsContext.stripeCheckout.elements.errors" style="display: flex; justify-content:center">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="17" height="17" viewBox="0 0 17 17" style="margin-right: 10px; ">
                                        <path class="base" fill="#e25950" d="M8.5,17 C3.80557963,17 0,13.1944204 0,8.5 C0,3.80557963 3.80557963,0 8.5,0 C13.1944204,0 17,3.80557963 17,8.5 C17,13.1944204 13.1944204,17 8.5,17 Z"></path>
                                        <path class="glyph" fill="#FFF" d="M8.5,7.29791847 L6.12604076,4.92395924 C5.79409512,4.59201359 5.25590488,4.59201359 4.92395924,4.92395924 C4.59201359,5.25590488 4.59201359,5.79409512 4.92395924,6.12604076 L7.29791847,8.5 L4.92395924,10.8739592 C4.59201359,11.2059049 4.59201359,11.7440951 4.92395924,12.0760408 C5.25590488,12.4079864 5.79409512,12.4079864 6.12604076,12.0760408 L8.5,9.70208153 L10.8739592,12.0760408 C11.2059049,12.4079864 11.7440951,12.4079864 12.0760408,12.0760408 C12.4079864,11.7440951 12.4079864,11.2059049 12.0760408,10.8739592 L9.70208153,8.5 L12.0760408,6.12604076 C12.4079864,5.79409512 12.4079864,5.25590488 12.0760408,4.92395924 C11.7440951,4.59201359 11.2059049,4.59201359 10.8739592,4.92395924 L8.5,7.29791847 L8.5,7.29791847 Z"></path>
                                    </svg>
                                    <span class="message" style="font-size: 14px; color: #e25950">{{ error }}</span>
                                </div>

                                <button type="submit" class="kfds-btn-primary kfds-font-bold kfds-lyt-width-100 kfds-btm-mrgn-16 custom-color-solid-bg" style="font-size: 18px; margin-top: 15px; height: 47px;">Pay now</button>
                            </form>

                        </div>
                        <div id="paypal-unbranded-card-container-%UNIQUE_ID%" v-show="paymentMethodsContext.paypalMarketplace.cardFields.show == true">
                            <div id="card-form" class="card_container">
                                <div id="card-name-field-container"></div>
                                <div id="card-number-field-container"></div>
                                <div id="card-expiry-field-container"></div>
                                <div id="card-cvv-field-container"></div>
                                <button id="multi-card-field-button" type="button" class="kfds-btn-primary kfds-font-bold kfds-lyt-width-100 kfds-btm-mrgn-16 custom-color-solid-bg">Pay now with Card</button>
                            </div>
                            <p id="result-message"></p>
                        </div>
                        <button type="button" class="kfds-btn-primary kfds-font-bold kfds-lyt-width-100 kfds-btm-mrgn-16 custom-color-solid-bg" style="font-size:18px;margin-top:15px; height: 47px;" v-if="shouldShowPayWithCardUsingStripeButton()" v-on:click="payWithCardUsingStripe()" id="ds-toggle-button">Pay with Card</button>
                        

                        <div style="text-align: center; font-weight: var(--weight-m); margin-bottom: 10px; margin-top: -8px;" v-if="multiplePaymentMethodsAvailable()">
                            <span>or</span>
                        </div>
                        <div id="paypal-button-container" v-if="shouldShowPayPalSmartPaymentButtons()" class="kfds-btm-mrgn-24">
                        </div>
                        <div id="applepay-container"></div>
                        <div id="googlepay-container"></div>
                        <div id="paypal-express-button-container" v-if="shouldShowPayPalExpressCheckout()" class="kfds-btm-mrgn-24">
                        </div>
                        <button type="button" class="kfds-btn-ghost kfds-btm-mrgn-16 full-width" v-on:click="startCheckout('PAYPAL_EXPRESS_CHECKOUT')" v-if="shouldShowPayPalExpressCheckoutSubscriptionCta()">
                            <i class="fab fa-paypal custom-paypal-color"></i>
                            <span style="margin-left:24px;">Subscribe with PayPal</span>
                        </button>
                        <button type="button" class="kfds-btn-ghost kfds-btm-mrgn-16 full-width" v-on:click="startCheckout('PAYPAL_MARKETPLACE_SUBSCRIPTION')" v-if="shouldShowPayPalConnectedSubscriptionCta()">
                            <i class="fab fa-paypal custom-paypal-color"></i>
                            <span style="margin-left:24px;">Subscribe with PayPal</span>
                        </button>
                        <button type="button" class="kfds-btn-ghost kfds-btm-mrgn-16 full-width" v-on:click="startCheckout('PAYPAL_BILLING_AGREEMENT')" v-if="shouldShowPayPalBillingAgreementCta()">
                            <i class="fab fa-paypal custom-paypal-color"></i>
                            <span style="margin-left:24px;">Subscribe with PayPal</span>
                        </button>
                        <div id="stripeNativePaymentButton" v-if="paymentMethodsContext.stripeCheckout.elements.nativePayment" style="margin-bottom: 15px;">
                        </div>

                    </div>
                    <a class="kfds-font-clr-dark" style="margin-top: 25px;display:block; cursor:pointer ; width:fit-content;" v-if="canGoBack" v-on:click="goBack()">Go back</a>
                    <div class="mtmb-md terms text-left">
                        By continuing, you agree any payments are direct to <span v-html="receiver.displayName"></span>, not to <nobr>Ko-fi</nobr>
                        and agree to the <a href="https://more.ko-fi.com/creator-to-supporter-terms" target="_blank">Creator–Supporter Terms</a>.
                        <br />
                        You also accept <a href="/home/tandcs" target="_blank"><nobr>Ko-fi’s</nobr> Terms of Use</a>, <a href="/home/privacy" target="_blank">Privacy Policy</a>,
                        and acknowledge that <nobr>Ko-fi</nobr> does not guarantee or endorse creator content.
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

</div>

            </div>
        </div>
    </div>
    <div id="fb-root"></div>
    <footer style="" class="profile-page-selector">
        
<div class="footerMini">   
    <div class="footer-mini">
        <div class="footer-mini-columns wf-row">
            <div class="footer-mini-col-left wf-col wf-col-6">
                <div class="footer-mini-copyright-text">© Ko-fi Labs</div>
            </div>
            <div class="footer-mini-col-right wf-col wf-col-6">
                <a href="#" class="footer-mini-link cky-banner-element text-nowrap">Cookie Settings</a>
                <a href="https://more.ko-fi.com/terms" class="footer-mini-link">Terms</a>
                <a href="https://more.ko-fi.com/privacy" class="footer-mini-link">Privacy</a>
                   
            </div>
        </div>
    </div>
</div>
    </footer>
<script defer src="https://static.cloudflareinsights.com/beacon.min.js/vcd15cbe7772f49c399c6a5babf22c1241717689176015" integrity="sha512-ZpsOmlRQV6y907TI0dKBHq9Md29nnaEIPlkf84rnaERnq6zvWvPUqr2ft8M1aS28oN72PdrCzSjY4U6VaAw1EQ==" data-cf-beacon='{"rayId":"95341e5c6d97eebe","serverTiming":{"name":{"cfExtPri":true,"cfEdge":true,"cfOrigin":true,"cfL4":true,"cfSpeedBrain":true,"cfCacheStatus":true}},"version":"2025.6.2","token":"9619e1070d3d4f9c95d9aa5acc908f1d"}' crossorigin="anonymous"></script>
</body>
</html>





<script>
    function openNav() {
        document.getElementById("mySidenav").style.width = "300px";
    }
    function closeNav() {
        document.getElementById("mySidenav").style.width = "0";
        $(".ui-mobile-nav-toggle").removeClass("active");
    }
</script>
<script src="//storage.ko-fi.com/cdn/scripts/jquery-2.0.0.min.js"></script>
<script src="//storage.ko-fi.com/cdn/scripts/jquery.unobtrusive-ajax.min.js"></script>
<script src="https://storage.ko-fi.com/cdn/scripts/jquery-sortable-min.js"></script>
<script src="https://storage.ko-fi.com/cdn/scripts/jquery-validate/1.15.1/jquery.validate.min.js"></script>
<script src="https://storage.ko-fi.com/cdn/scripts/jquery-validation-unobtrusive/3.2.6/jquery.validate.unobtrusive.min.js"></script>
<script src="/Scripts/shared.js?v=342mo"></script>

<script src="/Scripts/modules/polls-shared-functions.js?v=342mo"></script>
<script>
    $.validator.methods.range = function (value, element, param) {
        var globalizedValue = value.replace(",", ".");
        return this.optional(element) || (globalizedValue >= param[0] && globalizedValue <= param[1]);
    }
    $.validator.methods.number = function (value, element) {
        return this.optional(element) || /^-?(?:\d+|\d{1,3}(?:[\s\.,]\d{3})+)(?:[\.,]\d+)?$/.test(value);
    }
</script>
<script src="/Scripts/CustomGoogleTagManagerEvents.js?v=8"></script>
<script src="https://storage.ko-fi.com/cdn/scripts/bootstrap.min.js?sv=2019-02-02"></script>
<script src="https://storage.ko-fi.com/cdn/scripts/respond.min.js?sv=2019-02-02"></script>
<script src="/Scripts/backbutton-close-modal.js?v=8"></script>
<script src="https://storage.ko-fi.com/cdn/scripts/toastr.2.1.3.min.js" integrity="sha384-+bcXuCr529+uyqeaujfatc4JALU01X3FTgAok4Sn2LOIvh+dUPdIwi5zIsCUaUCL" crossorigin="anonymous"></script>
<script src="https://storage.ko-fi.com/cdn/scripts/modal-steps.min.js?v=1"></script>

<script>
    function followUser(userId, source) {
        $(".link-follow-" + userId).hide();
        $(".label-followed-" + userId).show();
        $.ajax({
            url: '/Home/ToggleFavorite',
            type: "POST",
            dataType: "html",
            data: {
                pageOrUserId: userId,
                source: source
            },
            cache: false,
            success: function (data) {
            },
            error: function (xhr, status, error) {
            }
        });
    }
</script>
    <script src="//storage.ko-fi.com/cdn/scripts/vue.2.6.11.min.js"></script>
    <script src="//storage.ko-fi.com/cdn/scripts/lodash.4.17.15.min.js"></script>
    <script src="/Scripts/commentsScripts.js?v=342mo"></script>
    <script type="text/javascript" src="/lib/lite-youtube-embed-master/lite-yt-embed.js?v=342mo"></script>
    <script src="/Scripts/modules/gallery-item-view.js?v=342mo" type="text/javascript"></script>

<script type="text/javascript" src="/Scripts/plugins/loadmorejs/loadmore.min.js?v=342mo"></script>
<script type="text/javascript" src="/Scripts/loadmore/shared-layout/loadmore-initialise.js?v=342mo" id="loadmore-initialise"></script>

<script type="/bundles/jqueryval?v=342mo"></script>



    <script src="https://www.paypal.com/sdk/js?components=buttons&client-id=AUIEyoriOCmlEGQq88qYLvzbyuzxmHBN2LoVh3mFxlbKVToHby0pSWGb4j6_uf7RqARdtIjtBgs6QCzV&currency=USD&intent=capture&commit=true&enable-funding=venmo&disable-funding=ideal&merchant-id=NEGG6VSESK8KE" data-partner-attribution-id="KOFILABSLIMITED_MP_SPB"></script>



<script>
    var checkoutApp = {
        modalHasCloseHandler: false,
        instances: {},
        openDonationModal(intent) {

            var uniqueId = (new Date()).getTime();
            var checkoutHtml = $('#checkout-modal-skeleton').html();
            checkoutHtml = replaceAllOccurences(checkoutHtml, '%UNIQUE_ID%', uniqueId);
            $('#checkoutModalContent').html(checkoutHtml);
            $('#checkoutModal').modal();

            var elementToMount = "#checkout-" + uniqueId;

            if (!checkoutApp.modalHasCloseHandler) {
                $('#checkoutModal').on('hidden.bs.modal', function () {
                    console.log("Modal closed");
                    _.forEach(checkoutApp.instances, function (i) {
                        if (i != null && i.isModal) {
                            checkoutApp.instances['#' + i.$el.id].$destroy();
                            checkoutApp.instances['#' + i.$el.id] = null;
                        }
                    });
                });
            }

            checkoutApp.modalHasCloseHandler = true;
            var isModal = true;

            checkoutApp.setupCheckoutInstanceOnElement(uniqueId, elementToMount, isModal, false, intent);
        },
        initializeCheckoutOnElement(elementToMount, renderPageBanner) {

            var uniqueId = (new Date()).getTime();
            var checkoutHtml = $('#checkout-modal-skeleton').html();
            checkoutHtml = replaceAllOccurences(checkoutHtml, '%UNIQUE_ID%', uniqueId);
            $(elementToMount).html(checkoutHtml);

            var isModal = false;

            checkoutApp.setupCheckoutInstanceOnElement(uniqueId, "#checkout-" + uniqueId, isModal, renderPageBanner);
        },
        setupCheckoutInstanceOnElement(instanceId, elementToMount, isModal, renderPageBanner, intent) {

            if (renderPageBanner == null) {
                renderPageBanner = false;
            }

            if (checkoutApp.instances[elementToMount] != null) {
                checkoutApp.instances[elementToMount].$destroy();
                checkoutApp.instances[elementToMount] = null;
            }

            checkoutApp.instances[elementToMount] = new Vue({
                    el: elementToMount,
                    data: {
                        instanceId: instanceId,
                        isDonationMode: true,
                        intent,
                        render: false,
                        isLoading: false,
                        isFullScreenLoading: false,
                        isEmbed: true,
                        isCompact: false,
                        compactModeNewTab: false,
                        isAtCheckoutStep: false,
                        canGoBack: true,
                        isModal: isModal,
                        isWidget: true,
                        renderPageBanner: renderPageBanner,
                        currency: 'USD',
                        currencySign: "$",
                        receiver: {
                            pageId: 'V7V11CLPVG',
                            displayName: "Mitsu",
                            profileImageUrl: 'https://storage.ko-fi.com/cdn/useruploads/79f2e274-d0c3-4864-b877-ba3955e6a7d8_bee75945-92ed-4995-9c76-d03be578ff54.png',
                            coverImageUrl: 'https://storage.ko-fi.com/cdn/useruploads/cbe8fea0-651d-4294-843c-f6325a8c79cc_.jpg'
                        },
                        payer: {
                            probablyCountryCode: 'PL'
                        },
                        isGuestCheckout: !false,
                        transactionId: null,
                        guestDetails: {
                            email: null,
                            name: null
                        },
                        paymentMethodsContext: {
                            paypalExpressCheckout: {
                                enabled: false
                            },
                            paypalMarketplace: {
                                enabled: true,
                                sellerConnected: true,
                                cardFields: {
                                    supported: false,
                                    show: false,
                                    instance: null
                                },
                                applePay: {
                                    instance: null,
                                    configObject: null,
                                    session: null
                                },
                                googlePay: {
                                    config: null,
                                    client: null
                                }
                            },
                            stripeCheckout: {
                                enabled: false,
                                elements: {
                                    showCardUi: false,
                                    
                                    supportsPaymentElement: false,
                                    nativePayment: false,
                                    errors: [],
                                    nameOnCard: null,
                                    instance: null
                                },
                                instance: null
                            },
                            fundingSource: null
                        },
                        donationPanel: {
                            // Coffee, Pizza etc
                            nounName: "Could you please send me your support?)",
                            // Donate, Tip
                            donateCta: "Donate",
                            quantity: 1,
                            amount: 1,
                            disableDonations: false,
                            disableOneTimeDonations: false,
                            isPrivateMessage: false,
                            suggestedAmounts: [1,2,3],
                            message: null,
                            isMembershipOrSubscription: false, // memberships or subscriptions
                            supportsRecurringDonations: true,
                            unitAmount: 5,
                            minimumAmount: 1,
                            showIsPrivateMessage: false,
                            membershipTiers: null,
                            maxNumberOfTierPreview: 3,
                            discordRewardsAvailable: false,
                            discordRewardsSubscribersOnly: false,
                            monthlyBenefits: {"UnlockableGalleryItems":0,"UnlockablePosts":0,"UnlockableShopItems":0,"UnlockableCommissions":0,"UnlockableDiscounts":0,"UnlockablePolls":0,"MembershipBenefits":[]},
                            upsellMonthly: true,
                            upsellMonthlySelected: false,
                            tipOptin: false,
                            tipPercentage: 5
                        }
                    },
                methods: {
                    initialize: function () {
                        this.initializeSupportPanel();

                            this.donationPanel.isMembershipOrSubscription = (this.isTiersMode() || this.donationPanel.supportsRecurringDonations) && false;

                        this.render = true;

                        setTimeout(function () {
                            doToolTips();
                        }, 200);

                        // checkApplePayAndGooglePayEligibility
                        this.showGooglePayBadgeIfEligible();
                        this.showApplePayBadgeIfEligible();

                    },
                    showGooglePayBadgeIfEligible: function () {
                        var that = this;

                        setTimeout(async function () {
                            try {
                                const paymentsClient = that.getGooglePaymentsClient();
                                const { allowedPaymentMethods, apiVersion, apiVersionMinor } = await that.getGooglePayConfig();
                                paymentsClient.isReadyToPay({ allowedPaymentMethods, apiVersion, apiVersionMinor })
                                    .then(function (response) {
                                        document.querySelector("#we-accept-paymentmethods #we-accept-paymentmethods__googlepay").classList.remove('hidden');
                                    })
                            }
                            catch {

                            }
                        }, 2000)


                    },
                    showApplePayBadgeIfEligible: function () {
                        return;

                        setTimeout(function () {
                            try {
                                if (!window.ApplePaySession) {
                                    return;
                                }

                                if (!ApplePaySession.canMakePayments()) {
                                    return;
                                }

                                document.querySelector("#we-accept-paymentmethods #we-accept-paymentmethods__applepay").classList.remove('hidden');
                            }
                            catch {

                            }
                        }, 2000);

                    },
                    flow: function () {
                        if (this.isEmbed)
                            return 'Embed';
                        if (this.isWidget)
                            return 'Widget';
                        if (this.isModal)
                            return 'ProfileDonationPanelPopup';

                        if (this.intent == 'direct_message_from_profile_page')
                            return 'ProfileDirectMessageCTA';

                        return 'ProfileDonationPanelInline';
                    },
                    isCustomAmountDonation: function () {
                        return this.donationPanel.amount % this.donationPanel.unitAmount;
                    },
                    multiplePaymentMethodsAvailable: function () {
                        var paymentMethodsCount = 0;

                            if (this.paymentMethodsContext.stripeCheckout.enabled == true) {
                                paymentMethodsCount++;

                                // if we're using the only card element, then the card element and the native apply pay/gpay options are considered seperate payment methods
                                // whereas the payment element wraps the card UX and apple pay/gpay inside one UI element
                                if (!this.paymentMethodsContext.stripeCheckout.elements.supportsPaymentElement && this.paymentMethodsContext.stripeCheckout.elements.nativePayment == true) {
                                    paymentMethodsCount++;
                                }
                            }

                        if (this.paymentMethodsContext.paypalMarketplace.enabled == true || this.paymentMethodsContext.paypalExpressCheckout.enabled) {
                            // they count as one because we always only choose one or the other
                            paymentMethodsCount++;

                            if (this.paymentMethodsContext.paypalMarketplace.cardFields.supported) {
                                paymentMethodsCount++;
                            }
                        }

                            return paymentMethodsCount > 1;
                        },
                    toggleUpsellActive: function () {
                        this.donationPanel.upsellMonthlySelected = !this.donationPanel.upsellMonthlySelected;
                        this.donationPanel.isMembershipOrSubscription = this.donationPanel.upsellMonthlySelected;
                    },
                    setIsMembership: function (isMembership) {
                        this.donationPanel.isMembershipOrSubscription = isMembership;
                        if (!isMembership) {
                            this.donationPanel.upsellMonthlySelected = false;

                            const $upsellCheckbox = document.querySelector(`#monthly-upsell-${this.instanceId}`);
                            if ($upsellCheckbox != null) {
                                $upsellCheckbox.checked = false;
                            }
                        }
                    },
                    switchToTiersTab: function () {
                        // make sure the donation modal is closed
                        $("#checkoutModal").modal('hide');
                        if (typeof (changeTab) == 'function') {
                            changeTab('6');
                        } else {
                            window.location = '/' + this.receiver.pageId + '/tiers';
                        }

                    },
                    createDonation: function () {
                        if (!this.isSupportPanelInValidState()) {
                            return;
                        }

                        trackCustomEvent("donation_checkout_step", "");
                        this.isLoading = true;

                        var that = this;
                        getTokenForAction('SETUP_DONATION').then(function (token) {
                            that.createDonationAjax(token);
                        });
                    },
                    createDonationAjax: function (token) {

                        if (!this.isSupportPanelInValidState()) {
                            return;
                        }

                        var that = this;
                        $.ajax(
                            {
                                type: "POST", //HTTP POST Method
                                url: "/Checkout/SetupDonation",
                                dataType: 'json',
                                data: {
                                    ReceiverPageId: this.receiver.pageId,
                                    Quantity: !this.isCustomAmountDonation() ? this.donationPanel.quantity : null, //passing null as quantity will force the Checkout API to fall back to the amount
                                    Amount: this.donationPanel.amount,
                                    PrivateMessage: this.donationPanel.isPrivateMessage,
                                    Message: this.donationPanel.message,
                                    IsMembership: this.donationPanel.isMembershipOrSubscription,
                                    GuestName: this.guestDetails.name,
                                    Token: token,
                                    FlowStartedFrom: that.flow()
                                },
                                success: function (response) {
                                    that.handleTransactionCreationResult(response);
                                },
                                error: function (response) {
                                    that.goIntoError();
                                }
                            });
                    },
                    initializeSupportPanel: function () {

                        var that = this;
                        setTimeout(function () {
                            // need to initialize collapse on the custom amount field, otherwise the collapse doesn't behave correctly
                            $("#customAmountControl").collapse({ 'toggle': false }).collapse('hide');

                            $('[name="cups"]').on('change', function () {
                                var selectedCup = $(this);
                                if (selectedCup.attr('data-other-button') == "true") {
                                    $('#customAmountControl').collapse('show');
                                    that.donationPanel.quantity = null;

                                } else {
                                    $('#customAmountControl').collapse('hide');
                                }
                            });
                        }, 50);
                    },
                    increaseQuantity: function () {
                        this.donationPanel.quantity++;
                        this.handleQuantityChanged();

                    },
                    decreaseQuantity: function () {
                        this.donationPanel.quantity--;
                        this.handleQuantityChanged();
                    },
                    handleQuantityChanged: function () {
                        this.donationPanel.amount = this.donationPanel.quantity * this.donationPanel.unitAmount;
                        $('#animatedcup-' + this.instanceId).addClass('cup-animation-active-1').delay(80).queue(function (next) {
                            $(this).removeClass('cup-animation-active-1');
                            next();
                        })
                    },
                    handleManualAmountChanged: function () {
                        if (this.donationPanel.amount % this.donationPanel.unitAmount == 0) {
                            this.donationPanel.quantity = this.donationPanel.amount / this.donationPanel.unitAmount;
                        }

                        if (this.donationPanel.amount < this.donationPanel.unitAmount) {
                            this.donationPanel.quantity = 1;
                        }
                    },
                    // the current transaction amount, does not include the optional tip amount
                    bindableDonationAmount: function () {
                        if (this.donationPanel.amount == null || (!this.isDonationMode && +this.donationPanel.amount < this.donationPanel.unitAmount))
                            return this.donationPanel.unitAmount;

                        return +this.donationPanel.amount;
                    },
                    bindableDonationAmountForStripe: function () {
                        var amount = this.bindableDonationAmount();
                        if (this.currency.toLowerCase() != 'jpy') {
                            amount = amount * 100;
                        }

                        return amount;
                    },
                    isDonationAmountValid: function () {
                        if (this.donationPanel.amount == null || this.donationPanel.amount < 1 || (!this.isDonationMode && this.donationPanel.amount < this.donationPanel.minimumAmount))
                            return false;
                        return this.bindableDonationAmount() >= this.donationPanel.minimumAmount;
                    },
                    isDonationAmountInvalid: function () {
                        return !this.isDonationAmountValid();
                    },
                    isGuestNameValid: function () {
                        if (this.guestDetails.name){
                            return this.guestDetails.name.length <= 50
                        }
                        
                        return true
                    },
                    isGuestNameInvalid: function () {
                        return !this.isGuestNameValid();
                    },
                    tipAmount: function () {
                        if (!this.donationPanel.tipOptin) {
                            return this.bindableDonationAmount();
                        }

                        return +parseFloat(this.bindableDonationAmount() * (this.donationPanel.tipPercentage / 100)).toPrecision(2);
                    },
                    // the transaction amount that includes the optional tip
                    totalTransactionAmount: function () {
                        return this.bindableDonationAmount() + this.tipAmount();
                    },
                    // in valid state, not invalid (lol)
                    isSupportPanelInValidState: function () {
                        return this.isDonationAmountValid() && this.isGuestNameValid();
                    },
                    handleTransactionCreationResult: function (response) {
                        if (response != null && response.Success == true) {

                            this.transactionId = response.TransactionId;
                            this.paymentMethodsContext.stripeCheckout.elements.errors = [];
                            this.paymentMethodsContext.stripeCheckout.elements.nativePayment = false;

                                // we handle subscription checkouts from the summary page
                                if (this.isCompact || this.donationPanel.isMembershipOrSubscription) {
                                    var url = '/summary/' + response.TransactionId;
                                    if (this.isCompact) {
                                        if (this.compactModeNewTab) {
                                            window.open(url, '_blank');
                                        } else {
                                            window.top.location.href = url;
                                        }
                                        this.goBack();
                                    } else {
                                        setTimeout(function () {
                                            document.location.href = url;
                                        }, 250);
                                    }

                                return;
                            }

                            this.goToCheckoutStep();

                            // initialize the relevant payment methods
                            if (this.paymentMethodsContext.paypalMarketplace.enabled == true) {

                                const eligibleForCardFields = this.isEligibleForPayPalCardFields();

                                if (eligibleForCardFields
                                    && (!this.paymentMethodsContext.stripeCheckout.enabled || !!this.paymentMethodsContext.stripeCheckout.elements.supportsPaymentElement)) {
                                    this.renderPayPalCardFields();
                                }

                                if (this.paymentMethodsContext.paypalMarketplace.sellerConnected == true) {
                                    this.initializePayPalMarketplace();
                                }
                                if (!this.paymentMethodsContext.stripeCheckout.enabled && this.paymentMethodsContext.paypalMarketplace.cardFields.supported == true) {
                                    this.initializePayPalApplePay();

                                    this.onGooglePayLoaded();
                                }

                            } else if (this.paymentMethodsContext.paypalExpressCheckout.enabled && this.donationPanel.isMembershipOrSubscription == false) {
                                this.initializePayPalCheckoutButtons();
                            }

                            if (this.paymentMethodsContext.stripeCheckout.enabled == true) {
                                // Render the native payment button if the capability exists
                                if (!this.paymentMethodsContext.stripeCheckout.elements.supportsPaymentElement) {
                                    this.initializeStripeNativePaymentIfAvailable();
                                } else {
                                    this.initializeStripePaymentElement();
                                }
                            }
                        } else {
                            this.goIntoError();
                        }
                    },
                    payWithCardUsingStripe: function () {
                        if (this.paymentMethodsContext.stripeCheckout.enabled == true) {
                            if (this.donationPanel.isMembershipOrSubscription == true) {
                                var that = this;
                                this.initiateTransactionCheckout('STRIPE');
                                //this.getCaptchaTokenForStartCheckout().then(function (token) {
                                //    that.startCheckout('STRIPE', token);
                                //});

                            } else {
                                this.initializeStripeCardPaymentElement();
                            }
                        }
                    },
                    goToCheckoutStep: function () {
                        this.isAtCheckoutStep = true;
                        this.isLoading = false;
                        this.paymentMethodsContext.stripeCheckout.elements.errors = [];
                        this.paymentMethodsContext.stripeCheckout.elements.showCardUi = false;
                        this.paymentMethodsContext.fundingSource = null;
                    },
                    goIntoStripePaymentError: function(error) {
                        if (error == null)
                            return;

                        this.goIntoError({
                            success: false,
                            friendly_error_message: error.message
                        });
                    },
                    goIntoError: function (errorResponse) {
                        this.isLoading = false;
                        this.hideCheckoutLoading();

                        if (errorResponse != null && errorResponse.success == false
                            && errorResponse.friendly_error_message != null
                            && errorResponse.friendly_error_message != '') {
                            swal({
                                title: 'Oops, that didn\'t work',
                                text: errorResponse.friendly_error_message,
                                type: 'warning',
                                showCancelButton: false,
                                confirmButtonColor: '#ff5f5f',
                                cancelButtonColor: '#aaa',
                                confirmButtonText: 'Ok'
                            })
                        } else {
                            toastr.error("Something went wrong. Please try again later.");
                        }
                    },
                    goBack: function () {
                        this.isAtCheckoutStep = false;
                        this.transactionId = null;
                        this.isLoading = false;
                        this.initializeSupportPanel(); // this needs to be called again to wire up the jQuery events to the elements that were removed from the DOM and now re-added

                    },
                    guestEmailIsValid: function () {
                        if (validateEmail(this.guestDetails.email)) {
                            return true
                        }
                        return false;
                    },
                    shouldPerformInstantPayment: function (paymentContextFromAPI) {
                        if (paymentContextFromAPI.PayPalExpressCheckout.Enabled == true
                            && paymentContextFromAPI.PayPalExpressCheckout.InstantCheckout == true)
                            return true;

                        if (paymentContextFromAPI.StripeCheckout.Enabled == true
                            && paymentContextFromAPI.StripeCheckout.InstantCheckout == true)
                            return true;
                        return false;
                    },
                    goToStripeWithSessionId: function (sessionId) {
                        var stripe = this.getStripeInstance();

                        stripe.redirectToCheckout({
                            sessionId: sessionId
                        }).then(function (result) {
                            // If `redirectToCheckout` fails due to a browser or network
                            // error, display the localized error message to your customer
                            // using `result.error.message`.
                            // swal(result.error.message);
                        });
                    },
                    validateIfGuestCheckoutInformationIsFilledInIfRequired(flow, skipStripeCardValidation, isSilent) {
                        if (isSilent == null) {
                            isSilent = false;
                        }

                        if (this.isGuestCheckout == false)
                            return true;

                        if (this.guestDetails.email == null) {
                            if (isSilent) {
                                return false;
                            }
                                
                            this.guestDetails.email = '';
                        }

                        var that = this;

                        if (!this.guestEmailIsValid()) {
                            if (!isSilent) {
                                toastr.error("Please fill in your email address.");
                                setTimeout(function () {
                                    $('#GuestEmail-' + that.instanceId).focus();
                                }, 250);
                            }

                            return false;
                        }

                        if (flow == 'STRIPE_INLINE_CARD' && skipStripeCardValidation == false) {
                            if (this.paymentMethodsContext.stripeCheckout.elements.nameOnCard == null || this.paymentMethodsContext.stripeCheckout.elements.nameOnCard.trim() == '') {
                                if (!isSilent) {
                                    toastr.error("Please fill in the name on your card.");
                                }

                                return false;
                            }
                        }

                        return true;
                    },
                    localCheckout: function () {
                        this.isLoading = true;
                        performLocalCheckout(this);
                    },
                    initializeStripeNativePaymentIfAvailable: function () {
                        if (this.payer.probablyCountryCode == null)
                            return;

                        var stripe = this.getStripeInstance();

                        var amount = this.bindableDonationAmountForStripe();

                        var paymentRequest = stripe.paymentRequest({
                            country: this.payer.probablyCountryCode.toUpperCase(),
                            currency: this.currency.toLowerCase(),
                            total: {
                                amount,
                                label: "Support for " + this.receiver.displayName
                            }
                        });

                        var elements = stripe.elements();

                        var prButton = elements.create('paymentRequestButton', {
                            paymentRequest: paymentRequest
                        });

                        var that = this;
                        // Check the availability of the Payment Request API first.
                        paymentRequest.canMakePayment().then(function (result) {
                            console.log('canMakePayment: ' + result);
                            var showLink = result != null && result.link == true && (true);
                            if (result && (result.applePay == true || result.googlePay == true || showLink)) {
                                that.paymentMethodsContext.stripeCheckout.elements.nativePayment = true;
                                setTimeout(function () {
                                    prButton.mount(elementToMount + ' #stripeNativePaymentButton');
                                }, 250);
                            } else {
                                that.paymentMethodsContext.stripeCheckout.elements.nativePayment = false;
                            }
                        });

                        prButton.addEventListener('click', function (event) {
                            if (!that.validateIfGuestCheckoutInformationIsFilledInIfRequired('STRIPE_NATIVE_PAYMENT', true)) {
                                event.preventDefault();
                            } else {

                            }
                        });


                        paymentRequest.on('paymentmethod', function (ev) {
                            // Confirm the PaymentIntent without handling potential next actions (yet).
                            var skipStripeCardValidation = true;
                            if (!that.validateIfGuestCheckoutInformationIsFilledInIfRequired('STRIPE_NATIVE_PAYMENT', skipStripeCardValidation)) {
                                ev.complete('fail');
                                return;
                            }

                            that.isLoading = true;
                            that.paymentMethodsContext.fundingSource = null;
                            that.initiateTransactionCheckout('STRIPE_NATIVE_PAYMENT')
                                .then(function (result) {
                                    if (result.success === undefined || result.success == false) {
                                        that.goIntoError(result);
                                    } else {
                                        stripe.confirmCardPayment(result.clientSecret,
                                            { payment_method: ev.paymentMethod.id },
                                            { handleActions: false }
                                        ).then(function (confirmResult) {
                                            if (confirmResult.error) {
                                                // Report to the browser that the payment failed, prompting it to
                                                // re-show the payment interface, or show an error message and close
                                                // the payment interface.
                                                ev.complete('fail');
                                                that.goIntoStripePaymentError(confirmResult.error);
                                            } else {
                                                // Report to the browser that the confirmation was successful, prompting
                                                // it to close the browser payment method collection interface.
                                                ev.complete('success');
                                                // Let Stripe.js handle the rest of the payment flow.
                                                stripe.confirmCardPayment(result.clientSecret).then(function (result) {
                                                    if (result.error) {
                                                        that.goIntoError();
                                                        // The payment failed -- ask your customer for a new payment method.
                                                    } else {
                                                        // The payment has succeeded.
                                                        window.location = 'https://ko-fi.com/Home/ProcessStripePayment?transactionId=' + that.transactionId + '&widget=' + that.isWidget;
                                                    }
                                                });
                                            }
                                        });
                                    }
                                });
                        });
                    },
                    getCaptchaTokenForAction: function (action) {
                        // if (this.useCaptchaForStartCheckout) {
                        if (true) {
                            return getTokenForAction(action);
                        }
                        return new Promise(function (resolve, reject) {
                            resolve(null);
                        });
                    },
                    initiateTransactionCheckout: function (paymentFlow) {
                        var that = this;
                        return new Promise(function (resolve, reject) {
                            that.getCaptchaTokenForAction('START_CHECKOUT')
                                .then(function (token) {
                                    fetch('/api/checkout/start', {
                                        method: 'POST',
                                        body: JSON.stringify({
                                            buyerInformation: {
                                                guestEmail: that.guestDetails.email,
                                                guestName: that.guestDetails.name
                                            },
                                            transactionId: that.transactionId,
                                            paymentFlow: paymentFlow,
                                            fundingSource: that.paymentMethodsContext.fundingSource,
                                            tipThePlatformAmount: that.tipAmount(),
                                            token: token
                                        }),
                                        headers: {
                                            'Content-Type': 'application/json'
                                        },
                                        credentials: 'same-origin'
                                    }).then(function (res) {
                                        return res.json();
                                    }).then(function (data) {
                                        if (data.success == null || data.success == false) {
                                            that.goIntoError(data);
                                            reject();
                                        } else if (paymentFlow == 'STRIPE') {
                                            that.showCheckoutLoading(paymentFlow);
                                            that.goToStripeWithSessionId(data.sessionId);
                                        } else if (paymentFlow == 'PAYPAL_MARKETPLACE_SUBSCRIPTION') {
                                            that.showCheckoutLoading(paymentFlow);
                                            window.location.href = data.redirect_url;
                                        } else if (data.redirect_url != null) {
                                            that.showCheckoutLoading(paymentFlow);
                                            window.location.href = data.redirect_url;
                                        } else if (data.success != null && data.success == true) {
                                            resolve(data);
                                        }
                                    });
                                })
                        });
                    },
                    performPayPalPaymentApproval: function (data, actions, flow) {
                        var that = this;
                        this.showCheckoutLoading(flow);
                        return fetch('/paypal/handle-approval', {
                            method: 'POST',
                            body: JSON.stringify({
                                paymentId: data.paymentID,
                                payerId: data.payerID,
                                orderId: data.orderID,
                                transactionId: that.transactionId,
                                isConnectedPayment: that.paymentMethodsContext.paypalMarketplace.sellerConnected
                            }),
                            headers: {
                                'Content-Type': 'application/json'
                            }
                        }).then(function (res) {
                            // res.redirected -> if an exception occurs in the handle-order-approval call, the backend might wrongly return a redirect to the /unexpectederror.html page, so we check for that too
                            if (!res.ok || res.redirected) {
                                that.isLoading = false;
                                if (actions != null) {
                                    actions.restart();
                                }

                                that.goIntoError(res);
                            } else {
                                res.json().then(function (responseData) {
                                    if (responseData.success) {
                                        that.showPaymentSuccesful(that.transactionId);
                                        var redirectUrl = '/home/coffeeshop?txid=' + that.transactionId + '&mode=g&widget=' + that.isWidget;
                                        window.location.href = redirectUrl;
                                        setTimeout(function () { document.location.href = redirectUrl }, 250);
                                    } else {
                                        that.goIntoError(responseData);
                                        return;
                                    }
                                });
                            }
                        });
                    },
                    initializeStripeCardPaymentElement: function () {
                        var stripe = this.getStripeInstance();
                        var elements = stripe.elements({
                            fonts: [
                                {
                                    cssSrc: "https://rsms.me/inter/inter-ui.css"
                                }
                            ],
                            // Stripe's examples are localized to specific languages, but if
                            // you wish to have Elements automatically detect your user's locale,
                            // use `locale: 'auto'` instead.
                            locale: 'auto'
                        });

                    /**
                        * Card Element
                        */
                    var card = elements.create("card", {
                        style: {
                            base: {
                                color: "#32325D",
                                fontWeight: 500,
                                fontFamily: "Inter UI, Open Sans, Segoe UI, sans-serif",
                                fontSize: "16px",
                                fontSmoothing: "antialiased",

                                "::placeholder": {
                                    color: "#CFD7DF"
                                }
                            },
                            invalid: {
                                color: "#E25950"
                            }
                        }
                    });

                    var that = this;
                    that.paymentMethodsContext.stripeCheckout.elements.showCardUi = true;

                    setTimeout(function () {
                        card.mount(elementToMount + " #stripe-cardpayment");
                        // Slowly expand the UI (has to be here in the setTimeout, otherwise it's somehow too fast and it won't work)
                        $("#stripe-payment-form-wrapper-" + that.instanceId)[0].classList.add('ds-expanded');
                        $("#cc-name-" + that.instanceId).focus(); //focus on the cc name field
                        var cardElement = elements.getElement('card');

                        cardElement.on('change', function (event) {
                            if (event.error) {
                                that.hideCheckoutLoading();
                                that.paymentMethodsContext.stripeCheckout.elements.errors = [event.error.message];
                            } else {
                                that.paymentMethodsContext.stripeCheckout.elements.errors = [];
                            }
                        });


                        // Configure form
                        var form = $(elementToMount + " #stripe-payment-form")[0];
                        form.addEventListener('submit', function (e) {
                            e.preventDefault();

                            if (!that.validateIfGuestCheckoutInformationIsFilledInIfRequired('STRIPE_INLINE_CARD')) {
                                return;
                            }

                            var plainInputsValid = true;
                            Array.prototype.forEach.call(form.querySelectorAll('input'), function (
                                input
                            ) {
                                if (input.checkValidity && !input.checkValidity()) {
                                    plainInputsValid = false;
                                    return;
                                }
                            });

                            if (!plainInputsValid || that.paymentMethodsContext.stripeCheckout.elements.errors.length > 0) {
                                // triggerBrowserValidation();
                                console.log("INVALID FORM");

                                return;
                            }

                            that.disableStripeFormInputs(form);

                            that.showCheckoutLoading('STRIPE_INLINE_CARD');
                            that.initiateTransactionCheckout('STRIPE_INLINE_CARD')
                                .then(function (result) {
                                    if (result.success === undefined || result.success == false) {
                                        that.goIntoError(result);
                                    } else {
                                        stripe.confirmCardPayment(result.clientSecret, {
                                            payment_method: {
                                                card: card,
                                                billing_details: {
                                                    name: that.paymentMethodsContext.stripeCheckout.elements.nameOnCard
                                                }
                                            }
                                        })
                                            .then(function (result) {
                                                if (result.error) {
                                                    if (result.error.type != "validation_error") {
                                                        that.goIntoStripePaymentError(result.error);
                                                    }
                                                    else {
                                                        that.paymentMethodsContext.stripeCheckout.elements.errors = [result.error.message];
                                                    }

                                                    that.isLoading = false;
                                                }
                                                else {
                                                    window.location = 'https://ko-fi.com/Home/ProcessStripePayment?transactionId=' + that.transactionId + '&widget=' + that.isWidget;
                                                    setTimeout(function () { document.location.href = 'https://ko-fi.com/Home/ProcessStripePayment?transactionId=' + that.transactionId + '&widget=' + that.isWidget }, 250);
                                                }
                                            });
                                    }
                                });

                        });

                    }, 200);

                    },
                    initializeStripePaymentElement: function () {
                        var stripe = this.getStripeInstance();

                        const elementOptions = {
                            mode: 'payment',
                            amount: this.bindableDonationAmountForStripe(),
                            currency: 'usd',
                            appearance: {
                                theme: 'stripe',
                                variables: {
                                    fontFamily: 'Nunito, sans-serif'
                                }
                            }
                        };

                        this.paymentMethodsContext.stripeCheckout.elements.instance = stripe.elements(elementOptions);

                        paymentElement = this.paymentMethodsContext.stripeCheckout.elements.instance.create('payment');

                        setTimeout(function () {
                            paymentElement.mount(elementToMount + ' #stripe-payment-element');

                            // document.querySelector(elementToMount + '#stripe-payment-element--submit').style.display = 'block';
                        }, 500);

                    },
                    initializePayPalCheckoutButtons: function () {
                        var that = this;

                        var pp = paypal.Buttons({
                            style: {
                                layout: 'vertical',
                                color: 'gold'
                            },
                            onClick: function (data, actions) {
                                if (!that.validateIfGuestCheckoutInformationIsFilledInIfRequired('PAYPAL_EXPRESS_CHECKOUT', false, false)) {
                                    return actions.reject();
                                }

                                that.paymentMethodsContext.fundingSource = data.fundingSource;

                                return actions.resolve();
                            },
                            createOrder: function () {
                                return that.initiateTransactionCheckout('PAYPAL_EXPRESS_CHECKOUT')
                                    .then(function (data) {
                                        if (data.token != null) {
                                            return data.token;
                                        }
                                        else {
                                            that.goIntoError(data);
                                        }
                                    });
                            },
                            onApprove: function (data, actions) {
                                return that.performPayPalPaymentApproval(data, actions, 'PAYPAL_EXPRESS_CHECKOUT');
                            }
                        });

                        setTimeout(function () {
                            pp.render(elementToMount + ' #paypal-express-button-container');
                        }, 100);

                        return;

                    },
                    initializePayPalMarketplace: function () {
                        var that = this;
                        setTimeout(function () {
                            var config = {
                                style: {
                                    layout: 'vertical',
                                    color: 'gold'
                                },
                                onClick: function (data, actions) {
                                    if (!that.validateIfGuestCheckoutInformationIsFilledInIfRequired('PAYPAL_MARKETPLACE_SPB', false, false)) {
                                        return actions.reject();
                                    }

                                    that.paymentMethodsContext.fundingSource = data.fundingSource;

                                    return actions.resolve();
                                },
                                onInit: function (data, actions) {
                                    if (that.isGuestCheckout) {

                                        try {
                                            if ($('#GuestEmail-' + that.instanceId).val().indexOf('.') > -1) {
                                                //trying not to disable if autofilled
                                                console.log('autofilled');
                                                actions.enable();
                                            }
                                            else {
                                                actions.disable();
                                            }
                                        }
                                        catch (err) { console.log(err); }

                                        // Listen for changes to the input
                                        document.querySelector('#GuestEmail-' + that.instanceId)
                                            .addEventListener('input', function (event) {
                                                // Enable or disable the button when it is checked or unchecked
                                                if (that.validateIfGuestCheckoutInformationIsFilledInIfRequired('PAYPAL_MARKETPLACE_SPB', false, true)) {
                                                    actions.enable();
                                                } else {
                                                    actions.disable();
                                                }
                                            });
                                    }
                                },
                                onApprove: function (data, actions) {

                                    return that.performPayPalPaymentApproval(data, actions, 'PAYPAL_MARKETPLACE_SPB');


                                },
                                onCancel: function (data) {
                                    that.showPaymentInterrupted();
                                },
                            };

                            var flow = that.donationPanel.isMembershipOrSubscription ? 'PAYPAL_BILLING_AGREEMENT' : 'PAYPAL_MARKETPLACE_SPB';

                            var checkoutFunction = function (data, actions) {
                                return that.initiateTransactionCheckout(flow).then(function (data) { return data != null ? data.id : null; });
                            };

                            if (!that.donationPanel.isMembershipOrSubscription) {
                                config.createOrder = checkoutFunction;
                            } else {
                                config.createBillingAgreement = checkoutFunction;
                            }

                            paypal.Buttons(config).render(elementToMount + ' #paypal-button-container');
                        }, 50);
                    },
                    isEligibleForPayPalCardFields: function () {
                        if (this.paymentMethodsContext.stripeCheckout.enabled
                            || !this.paymentMethodsContext.paypalMarketplace.cardFields.supported) {
                            return false;
                        }

                        var that = this;
                        this.paymentMethodsContext.paypalMarketplace.cardFields.show = false;
                        this.paymentMethodsContext.paypalMarketplace.cardFields.instance = window.paypal.CardFields({
                            createOrder: function (data, actions) {
                                that.showCheckoutLoading('PAYPAL_INLINE_CARD');
                                return that.initiateTransactionCheckout('PAYPAL_INLINE_CARD').then(function (data) { return data != null ? data.id : null; });
                            },
                            onApprove: function (data, actions) {
                                return that.performPayPalPaymentApproval(data, actions, 'PAYPAL_INLINE_CARD');
                            }
                        });

                        var isEligible = this.paymentMethodsContext.paypalMarketplace.cardFields.instance.isEligible();
                        if (!isEligible) {
                            document.querySelector("#card-form").style = "display: none";
                        }

                        return isEligible;
                    },
                    renderPayPalCardFields: function () {
                        var that = this;

                        if (that.paymentMethodsContext.paypalMarketplace.cardFields.instance == null) {
                            return;
                        }

                        const cardField = that.paymentMethodsContext.paypalMarketplace.cardFields.instance;

                        setTimeout(function () {
                            const nameField = cardField.NameField();
                            nameField.render("#card-name-field-container");

                            const numberField = cardField.NumberField();
                            numberField.render("#card-number-field-container");

                            const cvvField = cardField.CVVField();
                            cvvField.render("#card-cvv-field-container");

                            const expiryField = cardField.ExpiryField();
                            expiryField.render("#card-expiry-field-container");

                            // Add click listener to submit button and call the submit function on the CardField component
                            document
                                .getElementById("multi-card-field-button")
                                .addEventListener("click", () => {
                                    cardField.submit().catch((error) => {
                                        console.log(`Sorry, your transaction could not be processed...<br><br>${error}`);
                                        //resultMessage(
                                        //    `Sorry, your transaction could not be processed...<br><br>${error}`,
                                        //);
                                    });
                                });

                            that.paymentMethodsContext.paypalMarketplace.cardFields.show = true;


                        }, 0);
                    },
                    initializePayPalApplePay: function () {
                        if (!window.ApplePaySession) {
                            console.error('This device does not support Apple Pay');
                            return;
                        }

                        if (!ApplePaySession.canMakePayments()) {
                            console.error('This device is not capable of making Apple Pay payments');
                            return;
                        }

                        this.paymentMethodsContext.paypalMarketplace.applePay.instance = paypal.Applepay();

                        var that = this;

                        this.paymentMethodsContext.paypalMarketplace.applePay.instance.config()
                            .then(applepayConfig => {
                                that.paymentMethodsContext.paypalMarketplace.applePay.configObject = applepayConfig;

                                if (applepayConfig.isEligible) {
                                    document.getElementById("applepay-container").innerHTML = '<apple-pay-button id="btn-appl" buttonstyle="black" type="pay" locale="en">';
                                    document.getElementById("btn-appl").addEventListener("click", that.handlePayPalApplePayClicked);
                                }
                            })
                            .catch(applepayConfigError => {
                                console.error('Error while fetching Apple Pay configuration.');
                            });
                    },
                    handlePayPalApplePayClicked: function () {
                        if (!this.validateIfGuestCheckoutInformationIsFilledInIfRequired('PAYPAL_APPLE_PAY', false)) {

                             return;
                        }
                        const payment_request = {
                            countryCode: this.paymentMethodsContext.paypalMarketplace.applePay.configObject.countryCode,
                            merchantCapabilities: this.paymentMethodsContext.paypalMarketplace.applePay.configObject.merchantCapabilities,
                            supportedNetworks: this.paymentMethodsContext.paypalMarketplace.applePay.configObject.supportedNetworks,
                            currencyCode: "USD",
                            //requiredShippingContactFields: ["name", "phone", "email", "postalAddress"],
                            requiredBillingContactFields: ["postalAddress"],
                            total: {
                                label: "Ko-fi Support for Mitsu",
                                type: "final",
                                amount: this.bindableDonationAmount()
                            }
                        };
                        this.paymentMethodsContext.paypalMarketplace.applePay.session = new ApplePaySession(4, payment_request);
                        this.paymentMethodsContext.paypalMarketplace.applePay.session.onvalidatemerchant = this.payPalApplePayValidate;
                        this.paymentMethodsContext.paypalMarketplace.applePay.session.onpaymentauthorized = this.payPalApplePayAuthorized;
                        this.paymentMethodsContext.paypalMarketplace.applePay.session.begin();
                    },
                    payPalApplePayValidate: function (event) {


                        var that = this;
                        this.paymentMethodsContext.paypalMarketplace.applePay.instance.validateMerchant({
                            validationUrl: event.validationURL,
                            displayName: "Mitsu"
                        })
                            .then(validateResult => {
                                that.paymentMethodsContext.paypalMarketplace.applePay.session.completeMerchantValidation(validateResult.merchantSession);
                            })
                            .catch(validateError => {
                                console.error(validateError);
                                that.paymentMethodsContext.paypalMarketplace.applePay.session.abort();
                            });
                    },
                    payPalApplePayAuthorized: function (event) {
                        var that = this;
                        const applepay_payment_event = event.payment;
                        this.showCheckoutLoading('PAYPAL_APPLE_PAY')
                        this.initiateTransactionCheckout('PAYPAL_APPLE_PAY')
                            .then(function (result) {
                                console.log('apple pay authorized');
                                console.log(applepay_payment_event);
                                const pp_order_id = result.id;
                                // const apple_pay_email = applepay_payment_event.shippingContact.emailAddress;

                                var confirmOrderObj = {
                                    orderId: pp_order_id,
                                    token: applepay_payment_event.token
                                };

                                if (applepay_payment_event.billingContact != null) {
                                    confirmOrderObj.billingContact = applepay_payment_event.billingContact;
                                }

                                console.log('confirm order object');
                                console.log(confirmOrderObj);

                                that.paymentMethodsContext.paypalMarketplace.applePay.instance.confirmOrder(confirmOrderObj).then(confirmResult => {
                                    console.log('apple pay confirm order');
                                    console.log(confirmResult);
                                    fetch('/paypal/handle-approval', {
                                        method: 'POST',
                                        body: JSON.stringify({
                                            orderId: pp_order_id,
                                            transactionId: that.transactionId
                                        }),
                                        headers: {
                                            'Content-Type': 'application/json'
                                        }
                                    }).then(function (res) {
                                        if (!res.ok || res.redirected) {
                                            that.isLoading = false;
                                            that.goIntoError(res);
                                            that.paymentMethodsContext.paypalMarketplace.applePay.session.completePayment(ApplePaySession.STATUS_FAILURE);
                                        } else {
                                            res.json().then(function (responseData) {
                                                that.paymentMethodsContext.paypalMarketplace.applePay.session.completePayment(ApplePaySession.STATUS_SUCCESS);
                                                that.showPaymentSuccesful(that.transactionId);
                                                var redirectUrl = '/home/coffeeshop?txid=' + that.transactionId + '&mode=g&widget=' + that.isWidget;
                                                window.location.href = redirectUrl;
                                                setTimeout(function () { document.location.href = redirectUrl }, 250);
                                            })
                                        }


                                    })
                                }).catch((error) => {
                                    that.goIntoError(error);
                                    console.log(error);
                                });
                            });
                    },
                    submitStripePaymentElement: function () {

                        var stripe = this.getStripeInstance();
                        var that = this;

                        // run payment validation
                        this.paymentMethodsContext.stripeCheckout.elements.instance.submit().then(function (result) {
                            if (result.error) {
                                hideSpinner();
                                swal(result.error.message);
                                return;
                            }

                            if (!that.validateIfGuestCheckoutInformationIsFilledInIfRequired('STRIPE_PAYMENT_ELEMENT', false)) {
                                hideSpinner();
                                return;
                            }

                            that.showCheckoutLoading('STRIPE_PAYMENT_ELEMENT');
                            that.initiateTransactionCheckout('STRIPE_PAYMENT_ELEMENT')
                            .then(function (data) {
                                stripe.confirmPayment({
                                    elements: that.paymentMethodsContext.stripeCheckout.elements.instance,
                                    clientSecret: data.clientSecret,
                                    confirmParams: {
                                        return_url: 'https://ko-fi.com/Home/ProcessStripePayment?transactionId=' + that.transactionId,
                                    },
                                    // Uncomment below if you only want redirect for redirect-based payments
                                    // redirect: "if_required",
                                }).then(function (result) {
                                    if (result.error) {
                                        that.hideCheckoutLoading();
                                        swal(result.error.message);
                                        return;
                                    }
                                })
                            });

                        });

                    },

                    shouldShowPayPalCardFieldsButton: function () {
                        return this.shouldShowPayPalSmartPaymentButtons() && this.paymentMethodsContext.paypalMarketplace.cardFields.supported == true;
                    },
                    shouldShowPayPalCardFields: function () {
                        return this.shouldShowPayPalCardFieldsButton() && this.paymentMethodsContext.paypalMarketplace.cardFields.show == true;
                    },
                    shouldShowPayPalSmartPaymentButtons: function () {
                        var shouldShow = this.paymentMethodsContext.paypalMarketplace.enabled == true && !this.donationPanel.isMembershipOrSubscription;
                            /*&& (this.donationPanel.isMembershipOrSubscription == false || (this.donationPanel.isMembershipOrSubscription == true && this.paymentMethodsContext.paypalMarketplace.sellerConnected == false));*/
                        return shouldShow;
                    },
                    shouldShowPayPalExpressCheckout: function () {
                        if (this.paymentMethodsContext.paypalMarketplace.enabled && this.donationPanel.isMembershipOrSubscription == true)
                            return false;

                    if (this.paymentMethodsContext.paypalExpressCheckout.enabled == false)
                        return false;

                        return this.paymentMethodsContext.paypalMarketplace.enabled == false;
                    },
                    shouldShowPayPalConnectedSubscriptionCta: function () {
                        // No recurring payments supported with the disconnected flow for now in the non-modal (widget flow)
                        return false;
                        //if (this.donationPanel.isMembershipOrSubscription == true && this.paymentMethodsContext.paypalMarketplace.enabled == true) {
                        //    return true;
                        //}

                        //return false;
                    },
                    shouldShowPayPalBillingAgreementCta: function () {
                        if (this.paymentMethodsContext.paypalMarketplace.enabled && this.donationPanel.isMembershipOrSubscription == true)
                            return true;

                        return false;
                    },
                    shouldShowPayPalExpressCheckoutSubscriptionCta: function () {
                        // No recurring payments supported with the disconnected flow for now in the non-modal (widget flow)
                        if (this.donationPanel.isMembershipOrSubscription == true && this.paymentMethodsContext.paypalExpressCheckout.enabled == true && this.paymentMethodsContext.paypalMarketplace.enabled == false) {
                            return true;
                        }

                    return false;
                },
                    
                    shouldShowStripeCheckout: function () {
                        return this.paymentMethodsContext.stripeCheckout.enabled == true;
                    },
                    
                    shouldShowStripeCardElement: function () {
                        return this.paymentMethodsContext.stripeCheckout.enabled == true
                            && !this.paymentMethodsContext.stripeCheckout.elements.supportsPaymentElement
                            && this.paymentMethodsContext.stripeCheckout.elements.showCardUi;
                    },
                    shouldShowStripePaymentElement: function () {
                        return this.paymentMethodsContext.stripeCheckout.enabled == true
                            && this.paymentMethodsContext.stripeCheckout.elements.supportsPaymentElement
                            && !this.paymentMethodsContext.stripeCheckout.elements.showCardUi;
                    },
                    
                    shouldShowPayWithCardUsingStripeButton: function () {
                        return this.paymentMethodsContext.stripeCheckout.enabled == true
                            && !this.paymentMethodsContext.stripeCheckout.elements.supportsPaymentElement
                            && !this.paymentMethodsContext.stripeCheckout.elements.showCardUi;
                    },
                    shouldShowRegularDonationPanel: function () {

                    if (this.donationPanel.disableDonations) {
                        return false;
                    }

                    if (!this.isTiersMode())
                        return true;

                        if (!this.donationPanel.isMembershipOrSubscription)
                            return true;

                        return false;
                    },
                    shouldShowTiersPreview: function () {
                        return this.isTiersMode() && (this.donationPanel.disableDonations || (this.donationPanel.isMembershipOrSubscription && this.donationPanel.membershipTiers != null && this.donationPanel.membershipTiers.length > 0));
                    },
                    
                    isTiersMode: function () {
                        return this.donationPanel.membershipTiers != null && this.donationPanel.membershipTiers.length > 0 && (this.paymentMethodsContext.stripeCheckout.enabled || this.paymentMethodsContext.paypalMarketplace.enabled);
                    },
                    orderedAndFilteredTiers: function () {
                        if (!this.isTiersMode())
                            return [];

                        // testing not showing unavailable tiers in the donationpanel...
                        var availableTiers = _.filter(this.donationPanel.membershipTiers, function (tier) { return tier.SpotsAvailable == null || tier.SpotsAvailable > 0; });

                        // unless when there are no available, then fall back to default behavior
                        if (availableTiers.length == 0) {
                            availableTiers = this.donationPanel.membershipTiers;
                        }

                            return _.orderBy(availableTiers, ['PricePerMonth', 'Name'], ['asc', 'asc']).slice(0, this.donationPanel.maxNumberOfTierPreview);
                        },
                    orderedTierBenefits: function (benefits) {
                        return _.orderBy(benefits, ['Order'], ['asc']);
                    },
                    getStripeInstance: function () {
                        if (this.paymentMethodsContext.stripeCheckout.instance == null) {
                            this.paymentMethodsContext.stripeCheckout.instance = Stripe('pk_live_51B0RtLExmLtWgK8g8iuIDf43DrJw5rBS9yTLOxSiAeDiLnrSeM5NoEi8g6GBiVOGUkdovXFynKrJr8AltEpwqeX000myZ0W37g',
                            {
                                stripeAccount: '',
                                apiVersion: '2024-04-10'
                            });
                        }

                        return this.paymentMethodsContext.stripeCheckout.instance;
                    },
                    enableStripeFormInputs: function (form) {
                        Array.prototype.forEach.call(
                            form.querySelectorAll(
                                "input[type='text'], input[type='email'], input[type='tel']"
                            ),
                            function (input) {
                                input.removeAttribute('disabled');
                            }
                        );
                    },
                    disableStripeFormInputs: function (form) {
                        Array.prototype.forEach.call(
                            form.querySelectorAll(
                                "input[type='text'], input[type='email'], input[type='tel']"
                            ),
                            function (input) {
                                input.setAttribute('disabled', 'true');
                            }
                        );
                    },
                    blurAndLoading: function () {

                    },
                    unblurAndStopLoading: function () {

                    },
                    showPaymentSuccesful: function (transactionId) {
                        try {
                            swal.getTitle().textContent = 'Payment Succesful!';
                            swal.getContent().innerHTML = "<a href='/home/coffeeshop?txid=" + transactionId + "&mode=g' style='margin-top: 25px; display: block; font-weight: bold'>Continue</a>"
                        } catch (err) {

                        }
                    },
                    showPaymentInterrupted: function (transactionId) {
                        try {
                            swal({
                                allowEscapeKey: true,
                                allowOutsideClick: true,
                                title: 'Payment interrupted',
                                html: 'No funds were taken. Feel free to try again.',
                                showConfirmButton: true,
                                timer: 200000,
                                onOpen: () => {
                                }
                            });
                        } catch (err) {

                        }
                    },
                    showCheckoutLoading: function (flow) {
                        if (this.isFullScreenLoading)
                            return;

                        if (this.isWidget) {
                            this.loading = true;
                        } else {
                            // Redirecting to PayPal for Payment
                            if (flow == null) {
                                showFullScreenLoading();
                            } else {
                                if (flow == 'PAYPAL_EXPRESS_CHECKOUT') {
                                    showFullScreenLoading('Redirecting to PayPal for Payment...');
                                } else if (flow == 'STRIPE') {
                                    showFullScreenLoading('Redirecting to Stripe for Payment...');
                                } else {
                                    showFullScreenLoading();
                                }
                            }

                            this.isFullScreenLoading = true;
                        }
                    },
                    hideCheckoutLoading: function () {
                        swal.close();
                        this.isFullScreenLoading = false;
                        this.loading = false;
                    },
                    
                    getGooglePayConfig: async function () {
                        var that = this;
                        if (this.paymentMethodsContext.paypalMarketplace.googlePay.config === null) {
                            that.paymentMethodsContext.paypalMarketplace.googlePay.config = await paypal.Googlepay().config()
                            //paypal.Googlepay().config().then(function (c) {
                            //    that.paymentMethodsContext.paypalMarketplace.googlePay.config = c;
                            //})

                        }

                        return this.paymentMethodsContext.paypalMarketplace.googlePay.config;
                    },
                    getGooglePaymentDataRequest: async function () {
                        const { allowedPaymentMethods, merchantInfo, apiVersion, apiVersionMinor, countryCode } = await this.getGooglePayConfig();
                        const baseRequest = {
                            apiVersion,
                            apiVersionMinor
                        }
                        const paymentDataRequest = Object.assign({}, baseRequest);

                        paymentDataRequest.allowedPaymentMethods = allowedPaymentMethods;
                        paymentDataRequest.transactionInfo = this.getGoogleTransactionInfo(countryCode);
                        paymentDataRequest.merchantInfo = merchantInfo;

                        paymentDataRequest.callbackIntents = ["PAYMENT_AUTHORIZATION"];

                        return paymentDataRequest;
                    },
                    onPaymentAuthorized: function (paymentData) {
                        var that = this;
                        return new Promise(function (resolve, reject) {
                            that.processPayment(paymentData)
                                .then(function () {
                                    resolve({ transactionState: 'SUCCESS' });
                                })
                                .catch(function () {
                                    resolve({ transactionState: 'ERROR' });
                                });
                        });
                    },
                    getGooglePaymentsClient: function () {
                        var that = this;
                        if (this.paymentMethodsContext.paypalMarketplace.googlePay.client === null) {
                            this.paymentMethodsContext.paypalMarketplace.googlePay.client = new google.payments.api.PaymentsClient({
                                environment: 'PRODUCTION',
                                paymentDataCallbacks: {
                                    onPaymentAuthorized: that.onPaymentAuthorized
                                }
                            });
                        }
                        return this.paymentMethodsContext.paypalMarketplace.googlePay.client;
                    },
                    onGooglePayLoaded: async function () {
                        console.log('onGooglePayLoaded');

                        if (google && paypal.Googlepay) {
                            var that = this;
                            const paymentsClient = this.getGooglePaymentsClient();
                            const { allowedPaymentMethods, apiVersion, apiVersionMinor } = await this.getGooglePayConfig();
                            paymentsClient.isReadyToPay({ allowedPaymentMethods, apiVersion, apiVersionMinor })
                                .then(function (response) {
                                    if (response.result) {
                                        that.addGooglePayButton();
                                    }
                                })
                                .catch(function (err) {
                                    // show error in developer console for debugging
                                    console.error(err);
                                });
                        }

                    },
                    addGooglePayButton: function () {
                        const paymentsClient = this.getGooglePaymentsClient();
                        const button =
                            paymentsClient.createButton({
                                onClick: this.onGooglePaymentButtonClicked
                            });
                        document.querySelector(`#checkout-${this.instanceId} #googlepay-container`).appendChild(button);
                    },
                    getGoogleTransactionInfo: function (countryCode) {
                        return {
                            displayItems: [{
                                label: "Subtotal",
                                type: "SUBTOTAL",
                                price: this.bindableDonationAmount().toString(),
                            }
                            ],
                            countryCode: countryCode,
                            currencyCode: this.currency,
                            totalPriceStatus: "FINAL",
                            totalPrice: this.bindableDonationAmount().toString(),
                            totalPriceLabel: "Total"
                        };
                    },
                    onGooglePaymentButtonClicked: async function () {

                        if (!this.validateIfGuestCheckoutInformationIsFilledInIfRequired('PAYPAL_GOOGLE_PAY')) {
                            return;
                        }

                        const paymentDataRequest = await this.getGooglePaymentDataRequest();
                        const paymentsClient = this.getGooglePaymentsClient();
                        paymentsClient.loadPaymentData(paymentDataRequest);
                    },
                    processPayment: async function (paymentData) {
                        //const resultElement = document.getElementById("result");
                        //const modal = document.getElementById("resultModal");
                        //resultElement.innerHTML = "";
                        var that = this;
                        try {
                            this.showCheckoutLoading('PAYPAL_GOOGLE_PAY');
                            this.initiateTransactionCheckout('PAYPAL_GOOGLE_PAY')
                                .then(async function (data) {
                                    const { status } = await paypal.Googlepay().confirmOrder({
                                        orderId: data.id,
                                        paymentMethodData: paymentData.paymentMethodData
                                    });

                                    if (status === 'PAYER_ACTION_REQUIRED') {
                                        // console.log(" ===== Confirm Payment Completed Payer Action Required ===== ")
                                        paypal.Googlepay().initiatePayerAction({ orderId: data.id }).then(async () => {
                                            that.performPayPalPaymentApproval({ orderID: data.id }, null, 'PAYPAL_GOOGLE_PAY');

                                        })
                                    } else {
                                        /*
                                         * CAPTURE THE ORDER
                                         */
                                        that.performPayPalPaymentApproval({ orderID: data.id }, null, 'PAYPAL_GOOGLE_PAY');

                                    }
                                });

                        }
                        catch (err) {
                            that.goIntoError();
                        }

                    }
                },
                updated: function () {
                    if (this.donationPanel.membershipTiers == null) return;

                    var that = this;
                    this.$nextTick(function () {
                        if (that.donationPanel.membershipTiers == null) {
                            return;
                        }

                        for (let i = 0; i < that.donationPanel.membershipTiers.length; i++) {
                            const benefits = $('#benefits' + that.instanceId + i)[0];
                            if (typeof benefits !== 'undefined') {
                                const isOverflowing = benefits.clientHeight < benefits.scrollHeight;
                                if (isOverflowing) {
                                    const showMoreAnchor = $('#tier' + that.instanceId + i);
                                    showMoreAnchor.show();
                                }
                            }
                        }
                    })
                }
            });

            checkoutApp.instances[elementToMount].initialize();
        },
        // Initialize the checkout modal with a support panel
        initializeDonationFlow(elementToMount, renderPageHeader) {
            if (elementToMount == null) {
                checkoutApp.openDonationModal(null);
            } else {
                if (renderPageHeader == null) {
                    renderPageHeader = true;
                }
                checkoutApp.initializeCheckoutOnElement(elementToMount, renderPageHeader);
            }
        }
    };
    /* Helpers */
    function replaceAllOccurences(input, stringToFind, stringToReplace) {
        var temp = input;
        var index = temp.indexOf(stringToFind);
        while (index != -1) {
            temp = temp.replace(stringToFind, stringToReplace);
            index = temp.indexOf(stringToFind);
        }
        return temp;
    }

</script>
    <script>
        function performLocalCheckout(checkoutInstance) {
            // no-op
        }
    </script>


        <script>
            function renderCheckoutFlow() {
                checkoutApp.initializeDonationFlow('#payment-panel', true);
            }
            renderCheckoutFlow();
            //send frame height to parent
            window.addEventListener('message', function (event) {
                if (event.data == "FrameHeight") {
                    var panel = $('#payment-panel');
                    var offset = panel.offset();
                    var top = offset.top;
                    var bottom = top + panel.height();
                    event.source.postMessage({ "FrameHeight": bottom }, "*");
                }
            });

        </script>

    <script src="/Content/HorizontalScrollScripts.js?v=342mo"></script>
    <script>
        function setShowMoreVisibility() {
            const ps = document.querySelectorAll('p.kfds-c-para-control');
            ps.forEach(p => {
                p.classList[p.scrollHeight > p.clientHeight ? 'add' : 'remove']('truncated');
            });
        }
        $(function () {
            try {
                setShowMoreVisibility();
            } catch (err) { }
        });
    </script>
    
    <script>
        $(window).load(function () {
    try {
        $.get("/buttons/PageLoaded?pageId=V7V11CLPVG", function (data) {
        });
    }
    catch (err) {}
        });
    </script>

    <script>
        $(document).ready(function () {
            $('#giveGoldModal').modalSteps({
                btnCancelHtml: "Cancel",
                btnPreviousHtml: "Previous",
                btnNextHtml: "Next",
                btnLastStepHtml: "Buy Now",
                disableNextButton: false,
                completeCallback: function () {
                    $(".giveGoldForm").submit();
                    showSpinner();
                },
                callbacks: {},
                getTitleAndStep: function () { }
            });
            $('#buyCommissionModal').modalSteps({
                btnCancelHtml: "Cancel",
                btnPreviousHtml: "Back",
                btnNextHtml: "Next >",
                btnLastStepHtml: "Go to Payment",
                closeOnConfirm: false,
                disableNextButton: false,
                completeCallback: function (e) {

                    if (($('#contactDetails').val() == "")) {
                        swal("", "Please give your contact details.");
                        e.preventDefault();
                        e.stopImmediatePropagation();
                        return false;
                    }
                    if (!($('#commissionsAgreeToSeller').is(":checked"))) {
                        swal("", "Please accept the seller terms");
                        e.preventDefault();
                        e.stopImmediatePropagation();
                        return false;

                    }
                    else {
                        $(".commissionRequestForm").submit();
                        showSpinner();
                    }
                },
                callbacks: {
                    '1': doFirstStepSetup,
                    '2': doSecondStepSetup
                },
                getTitleAndStep: function () { }
            });

        });

        function doFirstStepSetup() {
            $("#commsNextBtn").hide();
        }
        function doSecondStepSetup() {
            $("#commsNextBtn").show();
        }
    </script>



        <script>
    $(document).ready(function () {
        $('.progress-bar').css('width', 1 + '%').attr('aria-valuenow', 1);
    $('.progress-bar').html('1%');
});
        </script>

    <script>
        $(document).ready(function () {
            $('.buy-selection').click(function (event) {
                $('.buy-selection').removeClass("buy-selection-active");
                $(this).addClass("buy-selection-active");
            });
        });
    </script>

        <script>
            $(document).ready(function () {
                $('#feedLoading').hide();
            });
        </script>
    <script>
        var dz;
        var postsPageIndex = 0;
        function htmlDecode(value) {
            return $('<div/>').html(value).text();
        }

    function loadPageFeed() {
        var data = {
            buttonId: 'V7V11CLPVG'
        };
        $.ajax({
            url: '/Buttons/LoadPageFeed',
            type: "GET",
            dataType: "html",
            data: data,
            cache: false,
            success: function (data) {
                $("#feedContainerDiv").html(data);
                $('#feedLoading').hide();
                if (window.instgrm) {
                    window.instgrm.Embeds.process();
                }

            },
            error: function (xhr, status, error) {
                //toastr.error('Error loading page feed.');
                $('#feedLoading').hide();
            }
        });
    }

    function showMoreFeed(start) {
        var data = {
            buttonId: 'V7V11CLPVG',
            start: start
        };
        $.ajax({
            url: '/Buttons/LoadPageFeed',
            type: "GET",
            dataType: "html",
            data: data,
            cache: false,
            success: function (data) {
                $("#feedContainerDiv").append(data);
                $('#feedLoading').hide();
            },
            error: function (xhr, status, error) {
                //toastr.error('Error loading page feed.');
                $('#feedLoading').hide();
            }
        });
    }

            $(document).ready(function () {
            function handleInfiniteScroll() {
                if ((typeof (endOfPostsFeed) !== "undefined") && (endOfPostsFeed)) return;
                if ((typeof (isPostsTabSelected) !== "undefined") && (!isPostsTabSelected)) return;
                if ((typeof (isLoadingPosts) !== "undefined") && (!isLoadingPosts)){
                    // Check if we're within 500 pixels of the bottom edge of the broser window.
                    var winHeight = window.innerHeight ? window.innerHeight : $window.height(); // iphone fix
                    var closeToBottom = ($(window).scrollTop() + winHeight > $(document).height() - 500);

                    if (closeToBottom) {
                        loadMorePagePosts();
                    }
                }
            };

            window.onscroll = handleInfiniteScroll;
            });

        // Not merged with main viewImage proc as this is a standalone widget
        function viewImage(galleryItemId) {
             resetLoadedImageFlags();
            var lowres = "";
            if ($(".gi-" + galleryItemId).length) {
                var img = $(".gi-" + galleryItemId).find('img');
                lowres = $(img).attr('src');

                if ($(img).data('width')) {
                    $("#skeleton-preview").css("width", $(img).data('width'));
                }

                $("#skeleton-preview").attr("src", lowres);
            }
            var sketletonhtml = $('#galleryItemViewSkeleton').html();
            $('#galleryItemViewDiv').html(sketletonhtml);
            $('#galleryItemView').modal();

        var data = {
            galleryItemId: galleryItemId,
            external: false
        };
        $.ajax({
            url: '/Gallery/LoadGalleryItem',
            type: "GET",
            dataType: "html",
            data: data,
            cache: false,
            success: function (data) {
                $(".loading-spinner-center").hide();
                $("#galleryItemViewDiv").html(data);
                $('#galleryItemView').modal();

            },
            error: function (xhr, status, error) {
                $(".loading-spinner-center").hide();
                toastr.error('Error loading image.');
                $('#feedLoading').hide();
            }
        });
    }
    </script>

<script src="https://storage.ko-fi.com/cdn/scripts/sweetalert.min.js?sv=2020-02-02"></script>
<script src="https://storage.ko-fi.com/cdn/scripts/spin.min.js?v=1"></script>

<script>
    $(window).bind("pageshow", function (event) {
        $(".app-full-spinner").hide();
        hideSpinner();
    });
</script>
<script>
    $(window).load(function () {
        try {
            $('.ladda-button').ladda('bind', { timeout: 14000 });
        }
        catch (err) { }
    });
</script>

<script>
                    $.ajax({
                        url: `/api/session/toasts`,
                        type: "GET",
                        cache: false,
                        statusCode: {
                            204: function () {
                                // no-op
                            }
                        },
                        success: function (data) {
                            if (data.success != null) {
                                toastr.success(data.success);
                            } else if (data.error != null) {
                                toastr.error(data.error);
                            }
                        },
                        error: function () {
                            // no-op
                        }
                    });
</script>


<script>
    $(document).ready(function () {
        hideSpinner();
        var top;
        $('.modal').on('show.bs.modal', function (e) {
            var doc = document.documentElement;
            top = (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);

        })
        $('.modal').on('hide.bs.modal', function (e) {

            $("html, body").removeClass("modal-open");
        })
        $('.modal').on('hidden.bs.modal', function (e) {

            $("html, body").removeClass("modal-open");
            $("html, body").scrollTop(top);
        })
    });
</script>
<script>
    function showFullScreenLoading(optionalMessage) {

        var message = 'Just a moment...';
        if (optionalMessage != null) {
            message = optionalMessage;
        }
        swal({
            title: message,
            allowEscapeKey: false,
            allowOutsideClick: false,
            html: '<div id="ds-sprite-loading-payment" style=""></div>',
            showConfirmButton: false,
            timer: 200000,
            onOpen: () => {
            }
        });
    }
</script>
<script>
    //tooltips
    $(document).ready(function () {
        $("[rel=tooltip]").tooltip({ placement: 'auto' });
    });
</script>


<script>
    function OpenStripeGold(onboarding, yearly) {
        alert('gold');

    }
    function OpenStripeGold(onboarding, yearly) {

                $.ajax(
                    {
                        type: "POST",
                        url: '/api/stripe/get-gold-session-id',
                        dataType: 'json',
                        data: {
                            pageId: 'A644275F',
                            yearly: yearly,
                        },
                        success: function (response) {
                            $(".loading-spinner-center").hide();
                            submittedForm = false;
                            if (response != null && response.success) {

                                console.log(response.responseText);
                                $(".loading-spinner-center").hide();
                                        var stripe = Stripe('pk_live_51B0RtLExmLtWgK8g8iuIDf43DrJw5rBS9yTLOxSiAeDiLnrSeM5NoEi8g6GBiVOGUkdovXFynKrJr8AltEpwqeX000myZ0W37g');

                            stripe.redirectToCheckout({
                            sessionId: response.responseText
                            }).then(function (result) {
                             // If `redirectToCheckout` fails due to a browser or network
                             // error, display the localized error message to your customer
                             // using `result.error.message`.
                                swal(result.error.message);
                        });


                            } else {
                                console.log(response.responseText);
                                toastr.error(response.responseText);
                                $(".loading-spinner-center").hide();
                            }
                        },
                        error: function (response) {
                            $(".loading-spinner-center").hide();
                            console.log(response.responseText);
                            toastr.error(response.responseText);  //
                        }

                    });
            }



</script>


<style>
    .swal2-popup .swal2-title {
        color: var(--text-color);
        font-size: 20px !important;
        font-family: var(--font-primary);
    }

    .plan-selected-border {
        border: 2px solid #42d6aa !important;
        background: #ebfff9 !important;
    }

    .badge-deal {
        font-weight: 600;
        margin-left: 2px;
        background-color: #42d6aa;
        border-radius: 50px;
        color: white;
        font-family: var(--font-primary);
        font-variant-ligatures: no-common-ligatures;
        font-size: 15px;
        padding: 6px 12px;
    }

    .minicheckout-price {
        font-size: 24px !important;
        font-weight: 600 !important;
        color: #323842 !important;
        border-bottom: none !important;
        margin-left: 2px;
    }

    .minicheckout-symbol {
        font-weight: 400;
        margin-left: 8px;
        font-size: 16px;
    }

    .minicheckout-permonth {
        color: #5c5f70;
        font-size: 16px;
    }

    .btn-mini-checkout {
        border-color: #009cde;
        background-color: #009cde;
        font-weight: var(--weight-m);
        padding: 12px 16px;
        margin: 8px 8px;
    }

        .btn-mini-checkout:hover {
            border-color: #009cde;
            background-color: #009cfe;
        }

    .btn-mini-checkout-alt {
        border: #2aabe0 1px solid;
        color: #2aabe0;
        background-color: #ffffff;
        font-weight: var(--weight-m);
        min-width: 160px;
        padding: 12px 16px;
        margin: 8px 8px;
        min-width: 180px;
    }

        .btn-mini-checkout-alt:hover, .btn-mini-checkout-alt:active, .btn-mini-checkout-alt:focus {
            background-color: #32aee1;
            border-color: #3ab1e2;
            color: #FFFFFF !important;
        }

    i.fab.fa-paypal {
        margin-right: 5px;
    }

    i.far.fa-credit-card {
        margin-right: 5px;
    }
</style>

<div class="modal inmodal fade in modal-choose-plan" style="height: 100%; display: none;" id="miniCheckout" tabindex="-1" role="dialog" aria-hidden="false" data-show="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-container p-24-to-16">
            <button type="button" class="close close-modal-mrgn" data-dismiss="modal">
                <span aria-hidden="true">×</span><span class="sr-only">Close</span>
            </button>
            <div class="kfds-c-lyt-pdg-16-24">
                <h2 class="swal2-title kfds-font-size-medium" id="swal2-title">Unlock all of Ko-fi</h2>
                <div class="kfds-font-size-small kfds-top-mrgn-16">Choose a fixed subscription or a low platform fee!</div>
            </div>
            <div id="swal2-content" class="swal2-content kfds-c-lyt-pdg-16-24" style="display: block;">
                <div class="kfds-lyt-column kfds-btm-mrgn-16">
                    <div id="paymentOptions">
                        <div>
                            <div class="kfds-c-choose-options kfds-lyt-row-start kfds-btm-mrgn-16" style="height: 120px;">
                                <label id="monthlyContainer" for="choice1" type="radio" title="monthly" class="kfds-lyt-row kfds-c-plan-wrapper">
                                    <input id="choice1" onchange="monthlySelected();" type="radio" name="foo" value="1" />
                                    <svg style="fill: #fff;" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
                                        <path d="M20.285 2l-11.285 11.567-5.286-5.011-3.714 3.716 9 8.728 15-15.285z" />
                                    </svg>
                                    <div class="kfds-lyt-column kfds-left-mrgn-8">
                                        <div class="kfds-lyt-row">
                                            <span class="kfds-font-size-subMedium kfds-font-bold"> Ko-fi Gold</span>
                                            <span onclick="" class="kfds-left-mrgn-4 kfds-font-size-subMedium kfds-font-bold"></span>
                                        </div>
                                        <span class="minicheckout-permonth kfds-font-clr-dark-op-8">$12 /month<br />0% platform fee</span>
                                    </div>
                                </label>

                            </div>
                        </div>
                        <div>
                            <div class="kfds-c-choose-options kfds-lyt-row-start" style="height: 120px;">
                                <label id="contributorContainer" title="contributor" class="kfds-lyt-row kfds-c-plan-wrapper plan-selected-border">
                                    <input type="radio" checked onchange="contributorSelected();" name="foo" value="1" />
                                    <svg style="fill: #fff;" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
                                        <path d="M20.285 2l-11.285 11.567-5.286-5.011-3.714 3.716 9 8.728 15-15.285z" />
                                    </svg>
                                    <div class="kfds-lyt-column kfds-left-mrgn-8 kfds-lyt-width-100">
                                        <div class="kfds-lyt-between">
                                            <div class="kfds-lyt-row">
                                                <span class="kfds-font-size-subMedium kfds-font-bold js-title"> Contributor</span>
                                                <span onclick="" class="kfds-left-mrgn-4 kfds-font-size-subMedium kfds-font-bold"></span>
                                            </div>
                                            <span class="badge badge-deal kfds-right-mrgn-8 kfds-font-size-hint">Recommended</span>
                                        </div>
                                        <span class="minicheckout-permonth kfds-font-clr-dark-op-8 js-description">$0 /month<br />5% platform fee</span>
                                    </div>
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
                <div>
                    <a href="#" tabindex="0" class="kfds-lyt-btn-height-l SwalBtn2 kfds-btn-tertiary-light kfds-btm-mrgn-16 kfds-srf-rounded js-contributor-opt-in-btn js-contributor-opt-in" data-support-only-content-action="gold-page">
                        <span class="kfds-font-bold js-contributor-btn-text" style="margin-left:16px;">Unlock all of Ko-fi</span>
                    </a>
                    <a style="display:none;" href="/Home/GoToPayPalGold" tabindex="0" class="kfds-lyt-btn-height-l SwalBtn2 kfds-btn-primary kfds-btn-primary-pp-blue kfds-btm-mrgn-16 btn-mini-checkout-monthly kfds-srf-rounded">
                        <i style="color:white!important;" class="fab fa-paypal"></i>
                        <span class="kfds-font-bold" style="margin-left:24px;">Pay with PayPal</span>
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    var goldExperimentVersion = "";
</script>


<script>
    var tracked = false;
    function showMiniCheckout() {
        $("#miniCheckout").modal();
        if (!tracked) {
            trackCustomEvent("gold_mini_checkout_opened" + goldExperimentVersion, "");
            tracked = true;
            console.log("gold_mini_checkout_opened");
        }
    };

    function monthlySelected() {
        $("#contributorContainer").removeClass("plan-selected-border");
        $("#monthlyContainer").addClass("plan-selected-border");
        $(".js-contributor-opt-in-btn").hide();
        $(".btn-mini-checkout-monthly").show();
    }
    function contributorSelected() {
        $("#monthlyContainer").removeClass("plan-selected-border");
        $("#contributorContainer").addClass("plan-selected-border");
        $(".js-contributor-opt-in-btn").show();
        $(".btn-mini-checkout-monthly").hide();
    }

    // Check if the user is already a contributor
    var contributorChecked = false;
    $('#miniCheckout').on('show.bs.modal', function (e) {
        if (!contributorChecked) {
            contributorChecked = true;
            $.ajax({
                url: '/api/settings/revenue-share/get',
                method: 'GET',
                success: function (data) {
                    if (data) {
                        // They don't need to do anything, make button return to Ko-fi
                        $("#contributorContainer .js-description").html("You're already a contributor. <br/>$0 /month<br />5% platform fee");
                        var btn = $(".js-contributor-opt-in");
                        btn.attr("href", "/manage");
                        btn.removeClass("js-contributor-opt-in");
                        var btnText = $(".js-contributor-btn-text");
                        btnText.text("Back to Ko-fi");
                    }
                },
                error: function (e) {
                }
            });
        }
    })

    window.addEventListener("creatorBecameAContributor", function creatorBecameAContributor(e) {
        if (e.detail.action === "gold-page") {
            window.location.href = "/manage";
        }
    }, false);    
</script>







<div class="modal inmodal fade" id="reportContentModal" tabindex="-1" role="dialog" aria-hidden="true" data-show="true">
    <div class="modal-dialog modal-md">
        <div class="simple-panel col-xs-12 pn-flex mb">
            <div class="row">
                <div class="pull-right">
                    <button type="button" class="close" data-dismiss="modal">
                        <span aria-hidden="true">×</span><span class="sr-only">Close</span>
                    </button>
                </div>
            </div>
            <div class="col-xs-12 ">
                <div class="modal-h2">Safety and Abuse Reporting</div>
                <div class="hint mb">
                    If you feel this page or content breaks our <a href="https://more.ko-fi.com/terms" target="_blank">terms of service</a> it is important to report it to us as soon as possible.
                </div>
            </div>
            <div class="col-xs-12 mb">
<form action="/Report/Content" method="post" role="form" target="_blank">                    <input type="hidden" id="ReportedPageId" name="ReportedPageId" />
                    <input type="hidden" id="ReportedContentType" name="ReportedContentType" />
                    <input type="hidden" id="ReportedContentId" name="ReportedContentId" />
                    <input type="hidden" id="ReportedFeedItemType" name="ReportedFeedItemType" value="" />
                    <input type="hidden" id="ReporterUserId" name="ReporterUserId" value="" />
                    <div class="row">
                        <input type="submit" name="SubmitButton" value="Nudity or sexual content" class="ghost-l-button kfds-srf-rounded kfds-btm-mrgn-16" />
                    </div>
                    <div class="row">
                        <input type="submit" name="SubmitButton" value="Violence" class="ghost-l-button kfds-srf-rounded kfds-btm-mrgn-16" />
                    </div>
                    <div class="row">
                        <input type="submit" name="SubmitButton" value="Scam / fake page" class="ghost-l-button kfds-srf-rounded kfds-btm-mrgn-16" />
                    </div>
                    <div class="row">
                        <input type="submit" name="SubmitButton" value="Copyright issue" class="ghost-l-button kfds-srf-rounded kfds-btm-mrgn-16" />
                    </div>
                    <div class="row">
                        <a href="https://help.ko-fi.com/hc/en-us/requests/new" class="ghost-l-button kfds-srf-rounded kfds-btm-mrgn-16" target="_blank">Unfulfilled Goods/Services</a>
                    </div>
                    <div class="row">
                        <input type="submit" name="SubmitButton" value="Illegal Content/Activity" class="ghost-l-button kfds-srf-rounded kfds-btm-mrgn-16" />
                    </div>
                    <div class="row">
                        <input type="submit" name="SubmitButton" value="Other" class="ghost-l-button kfds-srf-rounded kfds-btm-mrgn-16" />
                    </div>
                    <div class="row">
                        <button class="kfds-btn-tertiary-light kfds-lyt-width-100 kfds-btm-mrgn-16 kfds-srf-rounded" data-dismiss="modal"><span class="">Cancel</span></button>
                    </div>
</form>            </div>
        </div>
    </div>
</div>



<script>
    $(document).ready(function () {
        var doc = $(document),
            body = $('body'),
            win = $(window),
            breaks = {
                xs: 480,
                sm: 740,
                md: 992,
                lg: 1200
            };
    
        $.fn.ui_navbar = function () {
        var navbar = this;
        var toggle = $('.ui-mobile-nav-toggle');
        var navbar_nav = $('.ui-navigation');
        win.scroll(function () {
            var scroll_top = $(this).scrollTop();
            if (body.hasClass('ui-transparent-nav') && !body.hasClass('mobile-nav-active')) {
                if (scroll_top >= 24) {
                    navbar.removeClass('transparent');
                } else {
                    navbar.addClass('transparent');
                }
            }
        });
        toggle.html('<div><span></span><span></span><span></span><span></span></div>');
        var toggle_nav = function () {
            var win_top = win.scrollTop();
            if (!body.hasClass('mobile-nav-active')) {
                body.addClass('mobile-nav-active');
                toggle.addClass('active');
                navbar_nav.slideDown(250);
                if (body.hasClass('ui-transparent-nav')) {
                    navbar.removeClass('transparent');
                }
            } else {
                body.removeClass('mobile-nav-active');
                toggle.removeClass('active');
                navbar_nav.slideUp(200);
                if (body.hasClass('ui-transparent-nav')) {
                    if (win_top < 24) {
                        navbar.addClass('transparent');
                    }
                }
            }
        };
        toggle.on('click', function (e) {
            e.preventDefault();
            toggle_nav();
        });
        win.resize(function () {
            var w = $(this).width();
            var win_top = win.scrollTop();
            if (w >= 740) {
                if (body.hasClass('mobile-nav-active')) {
                    body.removeClass('mobile-nav-active');
                    toggle.removeClass('active');
                    if (body.hasClass('ui-transparent-nav')) {
                        if (win_top < 24) {
                            navbar.addClass('transparent');
                        }
                    }
                }
                navbar_nav.show();
            } else {
                if (!body.hasClass('mobile-nav-active')) {
                    navbar_nav.hide();
                }
            }
        });
        };
        $.fn.ui_collapsible_nav = function () {
            var cnav_toggle = this.find('a.toggle');
            var collapsible = {
                show: function (e) {
                    e.slideDown(250);
                },
                hide: function (e) {
                    e.slideUp(250);
                }
            };
            cnav_toggle.on('click', function (e) {
                e.preventDefault();
                var a = $(this);
                var ul = a.next();
                var sibs = a.parent().siblings();
                var sibs_togg = sibs.children('.toggle');
                if (!a.hasClass('active')) {
                    if (sibs_togg.length) {
                        sibs_togg.removeClass('active');
                        collapsible.hide(sibs_togg.next('ul'));
                    }
                    collapsible.show(ul);
                    a.addClass('active');
                } else {
                    collapsible.hide(ul);
                    a.removeClass('active');
                }
            });
            cnav_toggle.each(function () {
                var togg = $(this);
                if (togg.hasClass('active')) {
                    collapsible.show(togg.next('ul'));
                } else {
                    collapsible.hide(togg.next('ul'));
                }
            });
        };
        $('.navbar').ui_navbar();
    });
</script>

        <script type="text/javascript">
            try {
                if (typeof clarity !== 'undefined') {
                    clarity("set", "isLoggedIn", "false");
                }
            }
            catch (err) {
                console.log(err);
            }
        </script>
            <script type="text/javascript">
                if (typeof clarity !== 'undefined') {
                    clarity("set", "path", '/m1tsun3ko/');
                }
            </script>


<script>
    function getTokenForAction(action) {
        return new Promise(function (resolve, reject) {
            if (grecaptcha == null) {
                resolve(null);
            }
            else {
                grecaptcha.ready(function () {
                    grecaptcha.execute('6LeIm9UUAAAAAI9HoqMbV3xi0okAxcoNNumTv6QU', { action: action }).then(function (token) {
                        resolve(token);
                    });
                });
            }

        });
    }
</script>


<script>
    function subscribeToGold(yearly, provider) {
        showSpinner();
        var plan = yearly ? 'yearly' : 'monthly';
        getTokenForAction('subscribe_gold').then(function (subscribeCaptchaToken) {
            fetch('/api/subscriptions/gold/' + plan + '?provider=' + provider + '&captcha=' + subscribeCaptchaToken, {
                method: 'GET'
            })
            .then(function (res) {
                if (!res.ok && res.success == null)
                    return { success: false };

                return res.json();
            })
            .then(function (transactionResult) {
                if (transactionResult.success != null && transactionResult.success == false) {
                    ShowGenericError(transactionResult.friendly_error_message);
                    return;
                }
                getTokenForAction('START_CHECKOUT').then(function (startCheckoutToken) {
                    performLoggedInCheckout(transactionResult.transactionId, provider, startCheckoutToken);
                });
            });
        });
    }

    function performLoggedInCheckout(transactionId, paymentFlow, captchaToken) {
        fetch('/api/checkout/start', {
            method: 'POST',
            body: JSON.stringify({
                transactionId: transactionId,
                paymentFlow: paymentFlow,
                token: captchaToken
            }),
            headers: {
                'Content-Type': 'application/json'
            },
            credentials: 'same-origin'
        }).then(function (res) {
            if (!res.ok && res.success == null)
                return { success: false };

            return res.json();
        }).then(function (data) {
            if (data.success == false) {
                ShowGenericError(data.friendly_error_message);
                hideSpinner();
                return;
            }

            if (paymentFlow == 'STRIPE') {
                var stripe = Stripe('pk_live_51B0RtLExmLtWgK8g8iuIDf43DrJw5rBS9yTLOxSiAeDiLnrSeM5NoEi8g6GBiVOGUkdovXFynKrJr8AltEpwqeX000myZ0W37g');
                stripe.redirectToCheckout({
                    sessionId: data.sessionId
                }).then(function (result) { });
            }
            else {
                window.location = data.redirect_url;
            }
        });
    }
</script>
<div class="modal inmodal" style="height: 100%" id="pollModal" tabindex="-1" role="dialog" aria-hidden="true" data-show="true">
    <div class="modal-dialog modal-lg centred-fixed-div">
        <div class="poll-modal-container">
            <button type="button" class="close close-modal-mrgn poll-modal-close" data-dismiss="modal">
                <span aria-hidden="true"></span><span class="sr-only">Close</span>
            </button>
            <div class="pollModalContent">
                
            </div>
        </div>
    </div>
</div>
    <script>
        function register() {
            if (grecaptcha == null) {
                showError();
                return;
            }
            return new Promise(function (resolve, reject) {
                grecaptcha.ready(function () {
                    grecaptcha.execute('6LeIm9UUAAAAAI9HoqMbV3xi0okAxcoNNumTv6QU', { action: 'register' }).then(function (token) {

                        $("#ReCaptchaToken").val(token);
                        setTimeout(function () {
                            document.getElementById("submitButton").disabled = true;
                            $("#submitButton").val("Creating account...");
                            document.getElementById("signupForm").submit();
                        }, 50);
                    });
                });
            });
        }
        function showError() {
            swal({
                title: 'Oops, that didn\'t work',
                text: 'Please try again later',
                type: 'warning',
                showCancelButton: false,
                confirmButtonColor: '#ff5f5f',
                cancelButtonColor: '#aaa',
                confirmButtonText: 'Ok'
            })
        }
    </script>


<script>
    function assignYouTubeEmbedListeners() {
        
        return;
        var addYouTubeEventListener = (function () {
            var callbacks = [];
            var iframeId = 0;
            return function (iframe, callback) {
                
                if (iframeId === 0) {
                    window.addEventListener("message", function (e) {

                        if (e.origin !== "https://www.youtube.com" || e.data === undefined) return;
                        try {
                            var data = JSON.parse(e.data);
                            if (data.event !== 'onStateChange') return;

                            var callback = callbacks[data.id];
                            callback(data);
                        }
                        catch (e) { }
                    });
                }
                // store callback
                iframeId++;
                callbacks[iframeId] = callback;
                var currentFrameId = iframeId;
                // sendMessage to frame to start receiving messages
                iframe.addEventListener("load", function () {
                    var message = JSON.stringify({
                        event: 'listening',
                        id: currentFrameId,
                        channel: 'widget'
                    });
                    iframe.contentWindow.postMessage(message, 'https://www.youtube.com');

                    message = JSON.stringify({
                        event: "command",
                        func: "addEventListener",
                        args: ["onStateChange"],
                        id: currentFrameId,
                        channel: "widget"
                    });
                    iframe.contentWindow.postMessage(message, 'https://www.youtube.com');
                });
            }
        })();

        for (const embed of document.getElementsByClassName("youtube-embed")) {
            addYouTubeEventListener(embed, function (e) {
                switch (e.info) {
                    case 0:
                        break;
                    case 1:
                        var youTubeEmbeds = $('.youtube-embed');

                        for (let i = 0; i < youTubeEmbeds.length; i++) {
                            if (i === e.id - 1) {
                                continue;
                            }

                            youTubeEmbeds[i].contentWindow.postMessage('{"event":"command","func":"pauseVideo","args":""}', '*');
                        }
                        break;
                    case 2:
                        console.log('paused youtube');
                        break;
                }
            });
        };
    };
</script>
